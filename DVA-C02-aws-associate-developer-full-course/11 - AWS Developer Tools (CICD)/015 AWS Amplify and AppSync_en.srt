1
00:00:05,240 --> 00:00:10,030
in this lesson, I'm going to cover AWS amplify and apps sync

2
00:00:10,270 --> 00:00:12,390
and we'll get started with Amplify.

3
00:00:12,540 --> 00:00:20,000
Amplify is a set of tools and features for building full stack applications on AWS.

4
00:00:20,130 --> 00:00:23,690
That means it will build the web and mobile back ends

5
00:00:23,840 --> 00:00:27,200
as well as the web front end user interfaces.

6
00:00:27,640 --> 00:00:32,610
Amplified studio is a visual interface for building web and mobile apps.

7
00:00:32,810 --> 00:00:36,010
You can use the visual interface to define a data model,

8
00:00:36,020 --> 00:00:40,370
user authentication and fast storage without having the expertise

9
00:00:40,490 --> 00:00:42,060
in building out the back end.

10
00:00:42,540 --> 00:00:46,150
You can easily add AWS services not available

11
00:00:46,160 --> 00:00:49,850
within amplified studio using the cloud development kit,

12
00:00:49,850 --> 00:00:51,860
the AWS C D K.

13
00:00:52,340 --> 00:00:57,310
You can connect mobile and web apps using amplify libraries for IOS,

14
00:00:57,320 --> 00:01:01,980
android flutter react native and web using javascript.

15
00:01:02,090 --> 00:01:05,720
Amplify hosting is a fully managed continuous integration,

16
00:01:05,720 --> 00:01:08,210
continuous delivery and hosting service

17
00:01:08,420 --> 00:01:11,390
for fast, secure and reliable static and service side

18
00:01:11,540 --> 00:01:14,860
rendered apps. Next up we have apps sync

19
00:01:15,070 --> 00:01:20,160
app syncs are fully managed service for developing graph QL. Ap eyes

20
00:01:20,390 --> 00:01:22,780
applications can securely access,

21
00:01:22,780 --> 00:01:26,650
manipulate and receive real time updates from different data sources

22
00:01:26,790 --> 00:01:28,730
like databases or a P I. S.

23
00:01:29,000 --> 00:01:33,600
And in the diagram here we can see a series of absent data sources.

24
00:01:33,610 --> 00:01:38,550
We've got lambda dynamodb elasticsearch, Arora, a pub sub system.

25
00:01:38,550 --> 00:01:43,220
So that's going to be the simple notification service and an http source.

26
00:01:43,480 --> 00:01:48,510
And then on the front end we're able to unify this information

27
00:01:48,510 --> 00:01:53,260
together with appsync so that we can deliver information to our clients

28
00:01:53,640 --> 00:01:59,490
absent automatically scales the graph QL Api execution engine up and down to meet.

29
00:01:59,600 --> 00:02:01,190
Api request volumes.

30
00:02:01,360 --> 00:02:03,000
It uses graph QL,

31
00:02:03,010 --> 00:02:05,660
which is the data language that enables client apps

32
00:02:05,660 --> 00:02:09,900
to fetch change and subscribe to data from service

33
00:02:10,840 --> 00:02:11,310
absent,

34
00:02:11,310 --> 00:02:13,850
lets you specify which portions of your data should

35
00:02:13,850 --> 00:02:18,160
be available in real time manner using graph QL subscriptions

36
00:02:18,640 --> 00:02:22,300
and it supports lambda, dynamodb and elasticsearch.

37
00:02:22,310 --> 00:02:23,670
As we saw in the diagram,

38
00:02:23,680 --> 00:02:27,300
you can also have service side data cache and capabilities

39
00:02:27,360 --> 00:02:30,900
reducing the need to directly access your data sources.

40
00:02:31,030 --> 00:02:35,560
So that means better performance and fewer aPI calls to your back end.

41
00:02:35,640 --> 00:02:39,100
Appsync is fully managed and it eliminates the operational

42
00:02:39,110 --> 00:02:42,390
overhead of managing your own clusters as well.

43
00:02:42,570 --> 00:02:47,160
Now let's see appsync in action with amplify as well.

44
00:02:47,540 --> 00:02:50,400
So in this example we're using up sink

45
00:02:50,410 --> 00:02:54,460
and amplify to simplify access to microservices.

46
00:02:54,940 --> 00:02:57,510
Amplify is used to build and host the web

47
00:02:57,510 --> 00:03:01,010
store application and create the back end services.

48
00:03:01,330 --> 00:03:02,890
And then on the front end there we

49
00:03:02,890 --> 00:03:07,710
have appsync creating a unified api layer for integrating

50
00:03:07,850 --> 00:03:10,450
the various microservices running behind it

