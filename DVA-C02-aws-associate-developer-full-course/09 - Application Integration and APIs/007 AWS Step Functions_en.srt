1
00:00:05,200 --> 00:00:10,270
AWS Step Functions is a service that coordinates the components of an application.

2
00:00:10,720 --> 00:00:13,250
So let's have a look visually at what that means.

3
00:00:13,270 --> 00:00:15,850
So let's say we have an application with some logic.

4
00:00:16,120 --> 00:00:21,250
In the beginning, it needs to do something, process some code. Maybe a Lambda function is used for

5
00:00:21,250 --> 00:00:22,750
that portion of the application.

6
00:00:23,320 --> 00:00:29,200
Then we've got some branch and logics, some code within Step Functions that checks for a certain event.

7
00:00:29,650 --> 00:00:31,330
You can also have wait conditions.

8
00:00:31,690 --> 00:00:37,930
In this case, it's checking something related to the execution results of the previous Lambda function.

9
00:00:38,350 --> 00:00:41,200
If that's a yes, maybe it sends a notification.

10
00:00:41,200 --> 00:00:43,570
If there's a no, maybe it creates something.

11
00:00:43,750 --> 00:00:45,820
And that can also be a Lambda function.

12
00:00:46,240 --> 00:00:52,090
So, you can have many different Lambda functions and then you have your execution logic within Step Functions.

13
00:00:52,120 --> 00:00:56,050
The notification might then get processed by a Lambda function as well.

14
00:00:56,290 --> 00:01:01,900
We might then have a wait condition while processing takes place, and then eventually the Step Function

15
00:01:01,900 --> 00:01:07,570
completes and we might have a result that also needs to be checked by another Lambda function.

16
00:01:07,780 --> 00:01:13,570
So, we have this visualization here, and you actually see this in the console within Step Functions.

17
00:01:13,780 --> 00:01:20,140
So Step Functions is used to build distributed applications as a series of steps in a visual workflow.

18
00:01:20,410 --> 00:01:25,990
So, the workflow we saw in the previous slide, that's what you can see in Step Functions.

19
00:01:26,140 --> 00:01:29,350
And it really helps you to understand the logic that you're building out.

20
00:01:29,980 --> 00:01:35,530
You can quickly build and run what's called a state machine. And the state machine executes the steps

21
00:01:35,530 --> 00:01:36,490
of your application.

22
00:01:36,760 --> 00:01:43,420
So, what we do is we create the steps of our workflows using something called the JSON-based Amazon States

23
00:01:43,420 --> 00:01:43,930
language.

24
00:01:44,530 --> 00:01:50,710
We can then start executions and within the console you can actually see the real time status of each

25
00:01:50,710 --> 00:01:52,810
step within the visual workflow.

26
00:01:53,020 --> 00:01:58,420
Step Functions operates and scales the underlying compute layer, so it can scale seamlessly and work

27
00:01:58,420 --> 00:01:59,380
very reliably.

28
00:01:59,830 --> 00:02:03,160
Now, the best way to understand Step Functions is to see it in action.

29
00:02:03,400 --> 00:02:06,940
So, in the next lesson, we're going to build out a couple of state machines.

