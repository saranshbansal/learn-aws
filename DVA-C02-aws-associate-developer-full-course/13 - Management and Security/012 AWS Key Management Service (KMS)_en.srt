1
00:00:05,020 --> 00:00:05,530
Hey guys.

2
00:00:05,530 --> 00:00:10,370
In this lesson, you're going to learn about the AWS key management service. KMS.

3
00:00:10,400 --> 00:00:14,620
KMS is a service that's used to create and manage encryption keys.

4
00:00:14,640 --> 00:00:19,010
You can create symmetric and asymmetric encryption keys with KMS.

5
00:00:19,170 --> 00:00:24,810
The KMS keys are protected by hardware security modules or HSM

6
00:00:25,060 --> 00:00:27,240
that means they're stored very securely.

7
00:00:27,430 --> 00:00:33,910
So perhaps a developer wants to create and use KMS keys for encrypting information

8
00:00:34,083 --> 00:00:35,433
on AWS.

9
00:00:35,623 --> 00:00:39,263
In that case, the developer can create customer managed keys.

10
00:00:39,403 --> 00:00:43,813
These are keys that are created and managed by the developer. There's also AWS

11
00:00:44,273 --> 00:00:45,133
managed keys,

12
00:00:45,323 --> 00:00:47,093
these are created and managed by AWS,

13
00:00:47,613 --> 00:00:51,053
but you can use them with certain services and AWS KMS

14
00:00:52,443 --> 00:00:55,043
integrates with many AWS services.

15
00:00:55,043 --> 00:00:59,173
I'm just showing a few examples of some of the keys that they provide.

16
00:00:59,273 --> 00:01:02,613
So for example, for SQS the simple queue service

17
00:01:02,826 --> 00:01:06,096
and ACM, the AWS certificate manager,

18
00:01:06,336 --> 00:01:07,996
EBS the elastic block store

19
00:01:08,186 --> 00:01:12,366
and FSX for storing data in the FSX file systems.

20
00:01:12,526 --> 00:01:14,576
So you can encrypt data in all of those

21
00:01:14,576 --> 00:01:18,466
different locations using keys that are managed by AWS.

22
00:01:18,746 --> 00:01:21,976
Don't forget that when the developer here creates their own keys,

23
00:01:22,136 --> 00:01:24,926
those are called customer managed KMS keys.

24
00:01:25,086 --> 00:01:29,536
Now KMS keys are the most important resource to understand with KMS

25
00:01:29,646 --> 00:01:34,029
KMS keys are the most important resource to understand in KMS.

26
00:01:34,129 --> 00:01:38,049
They used to be known as customer master keys or CMKs.

27
00:01:38,209 --> 00:01:42,619
So you might occasionally even on the exam, see that terminology still used,

28
00:01:42,669 --> 00:01:47,979
the KMS key contains the key material that is used to encrypt and decrypt data.

29
00:01:48,049 --> 00:01:51,659
And by default, KMS will create the key material for KMS key.

30
00:01:51,669 --> 00:01:56,379
But optionally, you can import your own key material into AWS as well.

31
00:01:56,479 --> 00:01:56,639
Now,

32
00:01:56,639 --> 00:01:59,569
you need to remember that KMS key itself can

33
00:01:59,579 --> 00:02:02,882
only encrypt data up to four kilobytes in size.

34
00:02:02,882 --> 00:02:05,482
So that's a fairly small amount of data.

35
00:02:05,572 --> 00:02:09,151
Now, you might want to encrypt very large volumes of data.

36
00:02:09,162 --> 00:02:09,892
In that case,

37
00:02:09,892 --> 00:02:13,682
the KMS key can be used to generate encrypt

38
00:02:13,692 --> 00:02:16,132
and decrypt something called a data encryption key.

39
00:02:16,142 --> 00:02:21,232
And the data encryption key is what you use for encrypting large volumes of data.

40
00:02:21,382 --> 00:02:26,532
There are also alternative ways that you can store your KMS keys outside of KMS.

41
00:02:26,542 --> 00:02:29,402
One is known as an external key store.

42
00:02:29,402 --> 00:02:29,522
Here

43
00:02:29,535 --> 00:02:31,795
keys can be stored outside of AWS and you

44
00:02:31,795 --> 00:02:35,045
might want to do that for meeting regulatory requirements.

45
00:02:35,095 --> 00:02:36,915
When you use an external key store,

46
00:02:36,915 --> 00:02:42,905
you can create a KMS key in what's known as a KMS external key store or XKS.

47
00:02:42,915 --> 00:02:45,385
All keys are generated and stored

48
00:02:45,595 --> 00:02:47,165
in an external key manager.

49
00:02:47,225 --> 00:02:48,535
And when using an XKS,

50
00:02:48,535 --> 00:02:52,305
the key material does not leave your hardware security module.

51
00:02:52,335 --> 00:02:54,875
Another option is a custom key store.

52
00:02:54,885 --> 00:02:58,425
You can create KMS keys in what's called AWS cloud HSM.

53
00:02:59,268 --> 00:03:01,988
That's the custom key store. It's a different service.

54
00:03:01,998 --> 00:03:06,158
All keys are then generated and stored in the cloud HSM cluster

55
00:03:06,308 --> 00:03:08,138
that you own and manage.

56
00:03:08,328 --> 00:03:12,728
So that's dedicated infrastructure just for you. When using a custom key store.

57
00:03:12,728 --> 00:03:15,928
The cryptographic operations are performed solely in the

58
00:03:15,928 --> 00:03:18,778
cloudhsm cluster that you own and manage.

59
00:03:18,788 --> 00:03:23,868
By the way, custom key stores are not available for asymmetric KMS keys.

60
00:03:24,138 --> 00:03:26,988
Now let's look at the AWS managed KMS key.

61
00:03:26,988 --> 00:03:28,131
So as I mentioned,

62
00:03:28,131 --> 00:03:32,311
there is integration with hundreds of AWS services and

63
00:03:32,321 --> 00:03:35,031
KMS will manage some of those keys for you.

64
00:03:35,191 --> 00:03:38,171
So these ones are created managed and used on your

65
00:03:38,171 --> 00:03:43,211
behalf by an AWS service that's integrated with AWS KMS.

66
00:03:43,221 --> 00:03:48,351
You cannot manage these keys, you cannot rotate them or change their key policies.

67
00:03:48,411 --> 00:03:51,191
So you don't have control, you can just use them.

68
00:03:51,251 --> 00:03:54,541
You also cannot use AWS managed KMS keys

69
00:03:54,821 --> 00:03:57,044
in cryptographic operation directly.

70
00:03:57,154 --> 00:04:00,754
It's the actual service that you're utilizing that does that for you.

71
00:04:00,954 --> 00:04:03,134
So for example, if you're configuring

72
00:04:03,264 --> 00:04:07,314
Amazon S3 to use A KMS key that's managed by AWS,

73
00:04:07,324 --> 00:04:09,574
all you're really doing is enabling encryption.

74
00:04:09,744 --> 00:04:13,184
It's A W S that are handling all of the cryptographic operations.

75
00:04:13,264 --> 00:04:16,004
You're not doing it in your code on your application.

76
00:04:16,113 --> 00:04:18,624
So let's look at data encryption keys. Now,

77
00:04:18,774 --> 00:04:22,464
these are the ones that you can use to encrypt large amounts of data.

78
00:04:22,464 --> 00:04:26,427
So remember if it's over four kilobytes, you need to you a DEK,

79
00:04:26,497 --> 00:04:30,457
you can use KMS keys to generate encrypt and decrypt.

80
00:04:30,467 --> 00:04:34,617
The data encryption keys and KMS doesn't storm manage or track

81
00:04:34,617 --> 00:04:38,737
these keys or perform the cryptographic operations with the data keys.

82
00:04:38,857 --> 00:04:40,527
So that means that must be done

83
00:04:40,697 --> 00:04:44,337
in your code and also you must use and manage data keys

84
00:04:44,507 --> 00:04:49,527
outside of KMS. So that means your writing code in your application to utilize

85
00:04:49,697 --> 00:04:55,200
the data encryption keys. One important topic for the exam is rotation of KMS keys

86
00:04:55,340 --> 00:04:59,740
and this table helps you to understand the differences depending on the type of key.

87
00:04:59,890 --> 00:05:03,030
So we have the customer managed key. That's something you can view,

88
00:05:03,180 --> 00:05:04,260
you can manage it

89
00:05:04,540 --> 00:05:08,700
and it's only used within your account. Now, automatic rotation

90
00:05:08,810 --> 00:05:13,110
is optional, but you can perform it every 365 days.

91
00:05:13,110 --> 00:05:16,420
So this is changing the key material that your key users

92
00:05:16,530 --> 00:05:19,100
with the AWS managed keys. You can see them,

93
00:05:19,210 --> 00:05:21,270
you have no management capabilities

94
00:05:21,420 --> 00:05:24,343
and they are actually used Within your account only.

95
00:05:24,653 --> 00:05:29,123
And in this case, automatic rotation is required. You can't configure that

96
00:05:29,223 --> 00:05:32,023
and it happens every 365 days.

97
00:05:32,163 --> 00:05:35,013
Lastly, there's something called an AWS owned key.

98
00:05:35,123 --> 00:05:39,573
These you cannot view you cannot manage and they're not only used for your account,

99
00:05:39,573 --> 00:05:41,283
they're just used in general.

100
00:05:41,353 --> 00:05:43,723
So really these are just encryption keys that are

101
00:05:43,723 --> 00:05:46,723
being used that are completely outside of your control.

102
00:05:46,733 --> 00:05:48,583
But AWS is encrypting data.

103
00:05:48,593 --> 00:05:53,506
For example, network traffic, you cannot enable or disabled key rotation

104
00:05:53,676 --> 00:05:58,336
for AWS own keys and automatic key rotation is supported only

105
00:05:58,336 --> 00:06:02,956
on symmetric encryption keys with key material that's generated by KMS.

106
00:06:03,016 --> 00:06:07,156
That means the origin equals AWS underscore KMS.

107
00:06:07,216 --> 00:06:08,746
Now, as I mentioned before,

108
00:06:08,756 --> 00:06:12,406
AWS will rotate the keys every single year and

109
00:06:12,406 --> 00:06:15,376
that is optional for the customer managed keys.

110
00:06:15,626 --> 00:06:17,716
Now, when the keys are rotated,

111
00:06:17,726 --> 00:06:20,716
it means the key material used for encryption changes.

112
00:06:20,940 --> 00:06:25,560
But the actual encryption key ID will stay the same as you can see

113
00:06:25,760 --> 00:06:27,180
in this little diagram here.

114
00:06:27,190 --> 00:06:32,100
So that means you don't need to change your applications. They can still use the ID

115
00:06:32,250 --> 00:06:33,480
of the same key.

116
00:06:33,540 --> 00:06:35,840
But we have some new key material that's being

117
00:06:35,840 --> 00:06:39,640
used for encrypting data with automatic key rotation.

118
00:06:39,640 --> 00:06:41,700
The properties of the KMS key

119
00:06:42,010 --> 00:06:43,520
including its key ID

120
00:06:43,690 --> 00:06:46,360
ARN region policies and permissions

121
00:06:46,550 --> 00:06:48,910
do not change when the key is rotated.

122
00:06:48,960 --> 00:06:54,006
You don't need to change your applications or aliases that refer to the key id or ARN

123
00:06:54,156 --> 00:06:54,726
of the key.

124
00:06:54,726 --> 00:06:57,456
So that means minimal disruption for your

125
00:06:57,456 --> 00:07:00,096
applications after you enable key rotation,

126
00:07:00,096 --> 00:07:03,246
KMS will rotate the key automatically every year.

127
00:07:03,256 --> 00:07:07,536
Automatic key rotation is not supported for certain types of KMS key.

128
00:07:07,676 --> 00:07:09,666
Those are asymmetric KMS keys,

129
00:07:10,066 --> 00:07:11,316
HMAC KMS keys,

130
00:07:11,826 --> 00:07:15,296
keys in custom key stores in other words, cloudhsm

131
00:07:15,416 --> 00:07:18,240
and KMS keys with imported key material.

132
00:07:18,452 --> 00:07:21,942
So that means you imported some key material of your own

133
00:07:21,952 --> 00:07:25,642
rather than using the key material that AWS KMS generates.

134
00:07:25,772 --> 00:07:30,342
Now, by the way, you can rotate these KMS keys, but you need to do it manually.

135
00:07:30,502 --> 00:07:33,192
So what is manual rotation? Well, that's when

136
00:07:33,312 --> 00:07:37,072
you create a new KMS key with a different key ID.

137
00:07:37,182 --> 00:07:40,982
You need to then update your applications with the new key ID.

138
00:07:40,982 --> 00:07:44,382
So it's a little bit more disruptive, you can use an alias, however,

139
00:07:44,382 --> 00:07:45,992
to represent a KMS key.

140
00:07:46,002 --> 00:07:49,198
And in that case, you, you don't need to modify your application code.

141
00:07:49,338 --> 00:07:50,958
So you might have an application

142
00:07:51,108 --> 00:07:53,438
that application utilizes an alias

143
00:07:53,588 --> 00:07:55,168
to refer to the key.

144
00:07:55,218 --> 00:07:57,788
Now when you generate then a new key, well,

145
00:07:57,788 --> 00:08:00,358
the alias just points to the new key and

146
00:08:00,358 --> 00:08:02,488
you don't need to change your application code.

147
00:08:02,708 --> 00:08:06,768
So essentially the alias is associated with the new KMS key.

148
00:08:06,828 --> 00:08:09,668
It's important to understand KMS key policies,

149
00:08:09,848 --> 00:08:13,738
these define the management and usage permissions for KMS keys.

150
00:08:13,938 --> 00:08:17,404
Now this one here defines the administrative actions

151
00:08:17,404 --> 00:08:21,224
that are permitted for a KMS key administrator.

152
00:08:21,324 --> 00:08:26,154
So we can see this is an allow and then we have a variety of KMS actions

153
00:08:26,354 --> 00:08:29,714
including describe and put and create an update and so on.

154
00:08:29,864 --> 00:08:32,082
So these are the administrative actions that are

155
00:08:32,082 --> 00:08:35,014
permitted for the administrators of the keys.

156
00:08:35,154 --> 00:08:38,582
Multiple policy statements can be combined to separate

157
00:08:38,724 --> 00:08:41,284
administrative and usage permissions.

158
00:08:41,364 --> 00:08:44,210
So this one defines the cryptographic actions for

159
00:08:44,220 --> 00:08:47,960
encrypting and decrypting data with the KMS key.

160
00:08:47,960 --> 00:08:51,490
So you see this is not administrative, this is actual usage of the key.

161
00:08:51,620 --> 00:08:55,170
So encrypting, decrypting and re encrypting data

162
00:08:55,300 --> 00:09:00,050
permissions can be specified for delegating use of the key to AWS services.

163
00:09:00,050 --> 00:09:01,610
And these are known as grants.

164
00:09:01,840 --> 00:09:05,060
Grants are useful for temporary permissions as they can be

165
00:09:05,060 --> 00:09:09,410
used without modifying the key policies or IAM policies.

166
00:09:09,570 --> 00:09:10,780
So here we can see

167
00:09:10,890 --> 00:09:14,416
the actions here are create grant list grant

168
00:09:14,536 --> 00:09:15,716
and revoke grant.

169
00:09:15,926 --> 00:09:18,586
Now let's go over some additional exam tips

170
00:09:18,746 --> 00:09:20,806
to share snapshots with another account

171
00:09:20,806 --> 00:09:24,936
You need to specify the decrypt and create grant permissions

172
00:09:25,056 --> 00:09:26,616
so that it is possible

173
00:09:26,756 --> 00:09:29,616
the KMS via service condition key can be used

174
00:09:29,616 --> 00:09:33,166
to limit the usage to specific AWS services.

175
00:09:33,366 --> 00:09:34,426
So for example,

176
00:09:34,426 --> 00:09:40,956
you can create a condition such as this one where the string equals KMS via service.

177
00:09:40,966 --> 00:09:44,862
And then we have two services listed EC2 and RDS.

178
00:09:45,082 --> 00:09:45,942
That means

179
00:09:46,092 --> 00:09:51,262
this key policy is restricting usage of the key to those two specific services.

180
00:09:51,282 --> 00:09:52,912
Cryptographic erasure

181
00:09:53,122 --> 00:09:57,252
is a technique for removing the ability to decrypt data.

182
00:09:57,302 --> 00:10:01,152
Now, you use this technique when you have imported key material

183
00:10:01,362 --> 00:10:03,872
and you subsequently delete that key material.

184
00:10:03,882 --> 00:10:06,332
So if you think it's been exposed and you don't

185
00:10:06,332 --> 00:10:08,692
want somebody to be able to decrypt the data,

186
00:10:08,702 --> 00:10:12,438
then you can use the delete imported key material API to remove the

187
00:10:12,438 --> 00:10:16,358
key material and then it's never going to be possible again to decrypt that data.

188
00:10:16,358 --> 00:10:18,548
So be sure you know what you're doing an

189
00:10:18,558 --> 00:10:22,878
invalid key ID exception when using SSN parameter store

190
00:10:23,028 --> 00:10:24,938
indicates the KMS key

191
00:10:25,068 --> 00:10:28,968
is not enabled. Another one that comes up in the odd exam question

192
00:10:29,108 --> 00:10:30,998
and also make sure you know the differences

193
00:10:30,998 --> 00:10:34,698
between AWS managed and customer managed KMS keys,

194
00:10:34,798 --> 00:10:38,738
especially in the area of automatic versus manual rotation.

