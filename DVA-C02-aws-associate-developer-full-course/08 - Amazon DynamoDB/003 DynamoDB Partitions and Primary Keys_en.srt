1
00:00:05,140 --> 00:00:10,170
Hi guys. In this lesson, we're going to cover DynamoDB Partitions and Primary Keys.

2
00:00:10,290 --> 00:00:12,740
And this stuff is really important to understand

3
00:00:12,750 --> 00:00:17,680
so you can design your table for throughput and also searchability.

4
00:00:17,720 --> 00:00:21,205
DynamoDB stores data in partitions.

5
00:00:21,229 --> 00:00:24,771
And a partition is an allocation of storage for a table that's

6
00:00:24,795 --> 00:00:29,330
automatically replicated across multiple AZs within the region.

7
00:00:30,040 --> 00:00:33,850
DynamoDB manages the partitions fully for you.

8
00:00:33,940 --> 00:00:37,660
DynamoDB will always allocate sufficient partitions

9
00:00:37,660 --> 00:00:40,720
to support the provision throughput requirements.

10
00:00:40,750 --> 00:00:44,440
So when you specify the throughput you need on the frontend,

11
00:00:44,580 --> 00:00:46,560
and we'll see how to do that in this section,

12
00:00:46,940 --> 00:00:51,350
then DynamoDB will automatically take care of spreading your data across

13
00:00:51,510 --> 00:00:53,150
the relevant partitions.

14
00:00:53,840 --> 00:00:58,970
DynamoDB allocates additional partitions to a table in various situations.

15
00:00:59,090 --> 00:01:04,140
So if you increase the table's provisioned throughput settings beyond what the

16
00:01:04,140 --> 00:01:09,900
existing partitions can support, or if an existing partition fills to capacity

17
00:01:10,030 --> 00:01:12,260
and more storage is actually required.

18
00:01:12,540 --> 00:01:16,290
Now, for primary keys, there are two different types of primary key.

19
00:01:16,360 --> 00:01:19,130
We've got the partition keys and composite keys.

20
00:01:19,190 --> 00:01:23,520
A partition key must be a unique attribute such as a user ID.

21
00:01:23,520 --> 00:01:26,700
So every user will have their own individual ID.

22
00:01:26,870 --> 00:01:30,750
The value of the partition key is input to an internal hash function

23
00:01:30,850 --> 00:01:35,550
and that determines the partition or physical location on which the data is stored.

24
00:01:36,240 --> 00:01:39,311
If you're using the partition key as your primary key,

25
00:01:39,335 --> 00:01:43,487
we'll see what all this means in a moment, then no two items can have the same

26
00:01:43,511 --> 00:01:44,650
partition key.

27
00:01:44,970 --> 00:01:46,998
So let's look at an example table.

28
00:01:47,022 --> 00:01:49,980
On the left hand side here, we have a partition key.

29
00:01:50,160 --> 00:01:55,160
Now, in this case this is using a post ID, so maybe it's something like a forum.

30
00:01:55,540 --> 00:01:59,760
And there's a unique ID for each entry in the forum.

31
00:02:00,050 --> 00:02:02,300
And then on the right we have the attributes.

32
00:02:02,560 --> 00:02:07,670
And those are the information associated with each of these entries in the table.

33
00:02:07,680 --> 00:02:10,449
You can also have something called a composite key.

34
00:02:10,820 --> 00:02:15,360
That is a partition key plus a sort key in combination.

35
00:02:16,040 --> 00:02:18,650
So an example is a user posting to a forum.

36
00:02:18,820 --> 00:02:22,545
The partition key would be the user ID and the sort key

37
00:02:22,569 --> 00:02:24,510
would be the timestamp of the post.

38
00:02:24,790 --> 00:02:27,750
The two together mean that you can have multiple items

39
00:02:27,870 --> 00:02:30,940
in the table with the same partition key

40
00:02:30,940 --> 00:02:34,640
but they're going to have a different sort key and that creates uniqueness.

41
00:02:35,340 --> 00:02:39,750
Two items may have the same partition key but they must have a different sort key.

42
00:02:40,240 --> 00:02:43,490
All items with the same partition key are stored together

43
00:02:43,660 --> 00:02:46,710
and then they're sorted according to the sort key value.

44
00:02:46,780 --> 00:02:49,020
So that's why I said it's important to understand how

45
00:02:49,020 --> 00:02:52,320
this works in terms of performance and searchability.

46
00:02:52,550 --> 00:02:55,160
Using a composite key allows you to store

47
00:02:55,160 --> 00:02:57,960
multiple items with the same partition key.

48
00:02:58,240 --> 00:03:01,260
If you don't have a composite key with a sort key then you can

49
00:03:01,260 --> 00:03:06,060
only ever have one item in the table for each partition key entry.

50
00:03:06,440 --> 00:03:08,260
So let's have a look at an example.

51
00:03:08,640 --> 00:03:12,110
We've got a partition key here which is the client ID.

52
00:03:12,240 --> 00:03:16,430
We've then got a sort key which is the created timestamp.

53
00:03:16,600 --> 00:03:20,120
And together they form the primary key or composite key

54
00:03:20,280 --> 00:03:23,760
as it has both a partition key and a sort key together.

55
00:03:24,240 --> 00:03:27,350
So then we can have entries in the table such as this,

56
00:03:27,360 --> 00:03:31,800
where we have the email address of the user under the client ID

57
00:03:32,050 --> 00:03:35,650
and then some kind of timestamp in the created field.

58
00:03:35,820 --> 00:03:38,430
So we've got multiple items in the table.

59
00:03:38,440 --> 00:03:43,485
And we can of course in this situation with a composite key have multiple items

60
00:03:43,509 --> 00:03:46,910
from the same client ID, the same partition key.

61
00:03:47,100 --> 00:03:49,770
Then we might have our various attributes.

62
00:03:50,070 --> 00:03:53,240
And in this case we've got a whole range of different attributes.

63
00:03:53,380 --> 00:03:56,890
Now notice that the data structure here can be unpredictable.

64
00:03:57,040 --> 00:04:01,090
So for some items there are no attributes assigned.

65
00:04:01,540 --> 00:04:05,300
And that's because this is a store. We've got the SKU, S-K-U

66
00:04:05,500 --> 00:04:08,140
and then we've got the category, size, color and weight.

67
00:04:08,140 --> 00:04:11,610
And some of those don't apply to some entries in the table.

68
00:04:11,760 --> 00:04:15,265
DynamoDB evenly distributes provisions throughput

69
00:04:15,290 --> 00:04:19,390
using what's called a read capacity unit and a write capacity unit.

70
00:04:19,390 --> 00:04:21,550
So these are values you can specify.

71
00:04:22,240 --> 00:04:29,940
If your access pattern exceeds 3000 RCU or 1000 WCU for a single partition key value,

72
00:04:29,950 --> 00:04:31,750
your requests may be throttled.

73
00:04:32,140 --> 00:04:36,420
And reading or writing above the limit can be caused by a variety of

74
00:04:36,420 --> 00:04:39,630
issues including uneven distribution of data due

75
00:04:39,630 --> 00:04:44,920
to the wrong choice of partition key, frequent access of the same key in a partition,

76
00:04:45,050 --> 00:04:48,250
the most popular item which is sometimes known as a hot key,

77
00:04:48,640 --> 00:04:52,230
or a request rate greater than the provision throughput.

78
00:04:52,450 --> 00:04:55,520
Let's go over some best practices for partition keys.

79
00:04:55,880 --> 00:04:58,230
Use high cardinality attributes,

80
00:04:58,410 --> 00:05:02,990
things like mail ID, employee number, customer ID, session ID, and so on.

81
00:05:03,220 --> 00:05:06,580
So these are things which should be completely unique.

82
00:05:06,640 --> 00:05:09,080
So that gives you high cardinality.

83
00:05:09,640 --> 00:05:14,260
Use composite attributes so your customer ID plus your products ID

84
00:05:14,260 --> 00:05:17,500
plus your country code giving even more uniqueness.

85
00:05:17,710 --> 00:05:20,200
And then you might have the order date as the sort key.

86
00:05:21,040 --> 00:05:26,340
Cache popular items using DynamoDB accelerator for caching reads.

87
00:05:26,460 --> 00:05:29,750
And that will offload some of the impacts on your database.

88
00:05:29,860 --> 00:05:35,210
Add random numbers or digits from a predetermined range for write heavy use cases.

89
00:05:35,600 --> 00:05:40,110
For example, you might add a random suffix to an invoice number such as this one.

90
00:05:40,110 --> 00:05:42,960
So we've got the invoice number and then in red we

91
00:05:42,960 --> 00:05:46,000
have some random value that we're going to add to it.

92
00:05:46,310 --> 00:05:50,110
That will help with spreading the rights across different partitions.

93
00:05:50,210 --> 00:05:52,660
That's it for this lesson. I will see you in the next one.

