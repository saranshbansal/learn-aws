1
00:00:05,340 --> 00:00:10,170
In this lesson, I'm going to cover DynamoDB consistency models and transactions.

2
00:00:10,290 --> 00:00:15,360
DynamoDB supports eventually consistent as well as strongly consistent reads.

3
00:00:15,940 --> 00:00:20,180
Now, eventually consistent reads means that when you read data from a table,

4
00:00:20,180 --> 00:00:23,000
the response might not reflect the results

5
00:00:23,010 --> 00:00:25,780
of a recently completed write operation.

6
00:00:26,150 --> 00:00:29,050
The response might include some stale data.

7
00:00:29,440 --> 00:00:32,580
And if you repeat your read request after a short time,

8
00:00:32,640 --> 00:00:35,200
the response should return the latest data.

9
00:00:35,290 --> 00:00:37,810
We then have the strongly consistent read.

10
00:00:38,100 --> 00:00:42,120
In this case, a response is returned with the most up to date data

11
00:00:42,130 --> 00:00:46,310
reflecting the updates from all prior write operations that were successful.

12
00:00:46,640 --> 00:00:49,460
A strongly consistent read may not be available

13
00:00:49,460 --> 00:00:51,560
if there is a network delay or outage.

14
00:00:51,760 --> 00:00:55,810
In that case you might get a server error with an HTTP 500 code.

15
00:00:56,430 --> 00:01:01,680
Strongly consistent reads also have higher latency than eventually consistent reads.

16
00:01:01,930 --> 00:01:06,570
Strongly consistent reads are not supported on global secondary indexes

17
00:01:06,760 --> 00:01:09,090
and they use more throughput capacity

18
00:01:09,210 --> 00:01:12,730
than eventually consistent reads and we'll be able to calculate that soon.

19
00:01:12,740 --> 00:01:15,960
So let's look at a diagram to visualize what I'm talking about.

20
00:01:16,240 --> 00:01:21,840
Here we have an application, our DynamoDB table, and the actual backend of the

21
00:01:21,840 --> 00:01:25,770
table is spread across three availability zones within a region.

22
00:01:25,780 --> 00:01:29,970
So the application puts an item into the table.

23
00:01:30,070 --> 00:01:34,850
That item is then written into the table and it's going to get replicated.

24
00:01:35,340 --> 00:01:39,860
Now let's say you immediately perform a get item straight after the put item.

25
00:01:40,240 --> 00:01:46,280
And in this case DynamoDB has sent the read request to a partition over

26
00:01:46,290 --> 00:01:50,630
in table A here or a partition that doesn't have the replicated data in it

27
00:01:50,630 --> 00:01:54,440
at this point because we can see the full sync has not happened.

28
00:01:54,750 --> 00:01:57,780
Now in this case, it's an eventually consistent read.

29
00:01:57,980 --> 00:01:59,650
So we actually get a failure.

30
00:02:00,040 --> 00:02:03,000
Now a short while later the replication continues.

31
00:02:03,160 --> 00:02:07,440
That's all complete. And if we try and read again then we get a success.

32
00:02:07,600 --> 00:02:09,270
With a strongly consistent read,

33
00:02:09,270 --> 00:02:13,500
data will always be returned when reading after a successful write

34
00:02:13,870 --> 00:02:16,450
and eventually consistent reads are the default.

35
00:02:16,840 --> 00:02:19,025
Now, how do you configure strongly consistent reads?

36
00:02:19,049 --> 00:02:24,830
Well, you can do so with the API when you issue get item query and scan APIs.

37
00:02:25,000 --> 00:02:28,750
And you need to set the consistent read to true.

38
00:02:29,000 --> 00:02:32,260
Next we have something called DynamoDB transactions.

39
00:02:32,390 --> 00:02:35,140
In this case, the table will make coordinated

40
00:02:35,150 --> 00:02:40,038
all or nothing changes to multiple items within and across tables.

41
00:02:40,343 --> 00:02:42,991
Transactions provide ACID compliance.

42
00:02:43,015 --> 00:02:47,660
So that's atomicity, consistency, isolation, and durability.

43
00:02:48,340 --> 00:02:51,520
It enables reading and writing of multiple items across

44
00:02:51,520 --> 00:02:55,130
multiple tables as an all or nothing operation.

45
00:02:55,200 --> 00:02:58,620
So in other words it either succeeds everywhere or nowhere.

46
00:02:58,820 --> 00:03:03,070
DynamoDB checks for a prerequisite condition before writing to the table.

47
00:03:03,640 --> 00:03:08,191
With the transaction write API, you can group multiple Put, Update, Delete,

48
00:03:08,215 --> 00:03:10,180
and ConditionCheck actions.

49
00:03:10,360 --> 00:03:14,860
And you can submit them as a single TransactWriteItems operation

50
00:03:15,110 --> 00:03:17,550
that either succeeds or it fails.

51
00:03:17,800 --> 00:03:22,085
The same is true for multiple Get actions which you can group and submit as a

52
00:03:22,109 --> 00:03:24,930
single TransactGetItems operation.

53
00:03:25,040 --> 00:03:30,160
There's no additional cost to enable transactions for DynamoDB tables and you only

54
00:03:30,160 --> 00:03:33,950
pay for the reads or writes that are part of your transaction.

55
00:03:34,640 --> 00:03:40,840
DynamoDB performs two underlying reads or writes of every item in the transaction.

56
00:03:41,000 --> 00:03:45,560
That's one to prepare the transaction and then one to commit the transaction.

57
00:03:45,940 --> 00:03:47,240
So let's see it in action.

58
00:03:47,240 --> 00:03:49,918
We have an Amazon EC2 instance here.

59
00:03:49,942 --> 00:03:53,210
And we have two different tables across two different accounts

60
00:03:53,260 --> 00:03:54,850
account A and account B.

61
00:03:55,340 --> 00:03:58,240
Now we used to transact write items API

62
00:03:58,240 --> 00:04:01,850
to try and write to both tables simultaneously.

63
00:04:02,240 --> 00:04:04,270
Now the write in account A fails.

64
00:04:04,530 --> 00:04:07,000
That means the write in account B will fail

65
00:04:07,000 --> 00:04:09,860
as well because it's an all or nothing transaction.

66
00:04:10,340 --> 00:04:13,540
In another case, we rerun the TransactWriteItems

67
00:04:13,550 --> 00:04:16,480
and in this case it succeeds in both locations.

68
00:04:16,570 --> 00:04:20,200
So because it succeeds in both locations, all is good.

69
00:04:20,490 --> 00:04:25,820
If one fails, both fails, so remember that. Everything has to succeed all or nothing.

70
00:04:26,080 --> 00:04:27,410
And that's it for this lesson.

