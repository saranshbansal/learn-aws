1
00:00:05,210 --> 00:00:09,850
In this lesson, we'll explore some of the options for securing our Lambda Functions.

2
00:00:10,340 --> 00:00:14,260
So, let's have a look at the diagram and explore the security options.

3
00:00:14,740 --> 00:00:16,760
So firstly we have a Lambda Function.

4
00:00:16,770 --> 00:00:19,829
And let's say we want to write something to CloudWatch logs,

5
00:00:19,853 --> 00:00:22,750
and store items in a DynamoDB table.

6
00:00:23,140 --> 00:00:28,090
Well, to do that we need an IAM role known as the function execution role.

7
00:00:28,260 --> 00:00:31,950
And this is where we specify the permissions that we're giving

8
00:00:32,119 --> 00:00:33,560
to our Lambda Function.

9
00:00:34,040 --> 00:00:36,900
If we don't have the right permissions, it's going to fail.

10
00:00:37,440 --> 00:00:40,710
Now, we might also have code and environment variables.

11
00:00:40,990 --> 00:00:46,690
Files, deployment packages, and environment variables are encrypted at rest using

12
00:00:46,715 --> 00:00:50,640
a KMS key, so that data is also stored securely.

13
00:00:50,940 --> 00:00:55,590
As you know from the previous lesson, you can also use Secrets Manager to

14
00:00:55,590 --> 00:00:59,070
store things like database connection credentials or

15
00:00:59,080 --> 00:01:02,860
other things that you might need to store securely, any kind of secret.

16
00:01:03,240 --> 00:01:06,470
Now, AWS recommend that you use Secrets Manager

17
00:01:06,620 --> 00:01:09,230
instead of environment variables whenever you can.

18
00:01:09,450 --> 00:01:12,650
So let's say our developer is now connecting to Lambda.

19
00:01:12,990 --> 00:01:14,800
The Lambda API endpoint

20
00:01:14,920 --> 00:01:19,290
only supports TLS connections, so you can't have an unencrypted connection.

21
00:01:19,940 --> 00:01:22,100
Of course we need to ensure that our

22
00:01:22,100 --> 00:01:26,390
code that we're deploying to our Lambda Functions is secure.

23
00:01:26,510 --> 00:01:29,890
And we need to be able to guarantee the integrity of that code.

24
00:01:29,890 --> 00:01:34,280
If somebody wrote some malicious code or they modified the code in certain ways

25
00:01:34,470 --> 00:01:36,860
that could be a real serious issue.

26
00:01:37,240 --> 00:01:42,850
So we can use AWS Signer which is a fully managed code signing service.

27
00:01:43,010 --> 00:01:47,130
It's used to ensure the trust and integrity of the code.

28
00:01:47,530 --> 00:01:51,480
The code is validated against a digital signature.

29
00:01:52,040 --> 00:01:57,410
With Lambda, you can ensure that only trusted code runs in your Lambda Functions.

30
00:01:57,910 --> 00:02:02,510
Signer is used to then create the digitally signed packages for deployment.

31
00:02:03,210 --> 00:02:08,600
The IAM policies are used to enforce that the functions can be created only

32
00:02:08,780 --> 00:02:10,460
if code signing is enabled.

33
00:02:10,758 --> 00:02:12,440
So with all this in place,

34
00:02:12,530 --> 00:02:15,130
if a developer leaves your organization and you're

35
00:02:15,130 --> 00:02:17,200
worried about what they've done with their code,

36
00:02:17,330 --> 00:02:20,590
you can revoke all versions of the signing profile

37
00:02:20,700 --> 00:02:21,872
so the code cannot run.

38
00:02:21,897 --> 00:02:25,380
And watch out for that because it pops up as an exam question.

39
00:02:25,510 --> 00:02:27,286
So now, you're well prepared.

