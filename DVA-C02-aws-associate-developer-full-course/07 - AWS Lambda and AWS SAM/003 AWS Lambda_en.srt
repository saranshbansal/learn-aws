1
00:00:05,230 --> 00:00:12,850
AWS Lambda is AWS is serverless compute service, and it's a service that we can use in event driven

2
00:00:12,850 --> 00:00:16,030
architectures for running code based on triggers.

3
00:00:16,540 --> 00:00:18,040
So let's have a look at what that means.

4
00:00:18,700 --> 00:00:20,290
Well, we have a lambda function here.

5
00:00:20,560 --> 00:00:25,300
The lambda function is created for the console or using the Seelye or the API.

6
00:00:25,780 --> 00:00:30,030
And once you have the lambda function, you then upload some code.

7
00:00:30,040 --> 00:00:36,820
So in this case, a developer is going to upload a zip file, and that code is now part of the lambda

8
00:00:36,820 --> 00:00:37,360
function.

9
00:00:37,720 --> 00:00:39,820
Now, at this point in time, nothing is happening.

10
00:00:39,820 --> 00:00:41,080
Nothing is actually running.

11
00:00:41,530 --> 00:00:46,660
Your code is just sat there and you don't pay anything until your code actually executes.

12
00:00:47,900 --> 00:00:52,820
So what we need now is for a trigger to happen and cause the code to actually run.

13
00:00:53,480 --> 00:00:55,310
Now these come from event sources.

14
00:00:55,760 --> 00:01:03,170
Those sources can be the Seelye, the API, the SDK or they can be coming from another eight U.S. service.

15
00:01:04,170 --> 00:01:10,800
We can also run our lambda functions on a schedule, so when the lambda function executes, the code

16
00:01:10,800 --> 00:01:14,740
is run and it performs whatever you have program that code to do.

17
00:01:15,180 --> 00:01:20,160
Lambda is typically used for code that will complete in a fairly short period of time.

18
00:01:20,430 --> 00:01:24,810
In fact, lambda functions have a maximum execution time of 15 minutes.

19
00:01:25,260 --> 00:01:31,740
So if your application needs to run a specific instance of a function for longer than 15 minutes, then

20
00:01:31,740 --> 00:01:33,630
it's simply not going to work with Lambda.

21
00:01:34,020 --> 00:01:36,700
And then you might want to use EC2 with EC2.

22
00:01:36,720 --> 00:01:38,850
You can run your code for as long as you want.

23
00:01:39,510 --> 00:01:44,760
Now, this is an individual instance of a function running that this actually applies to, and we'll

24
00:01:44,760 --> 00:01:46,170
talk a bit more of that in a moment.

25
00:01:46,830 --> 00:01:52,020
But if you have code that needs to run for a relatively short period of time, less than 50 minutes,

26
00:01:52,020 --> 00:01:53,610
or maybe just a few seconds.

27
00:01:53,910 --> 00:02:00,570
As with many use cases of lambda, then it can be very cost effective and obviously you have no service

28
00:02:00,570 --> 00:02:01,320
to manage here.

29
00:02:01,590 --> 00:02:05,250
So that is another operational benefit that you get.

30
00:02:05,730 --> 00:02:10,530
So Lambda will execute your code only when needed, and it scales automatically.

31
00:02:10,770 --> 00:02:15,930
You pay only for the compute time you consume and you don't pay anything when your code is not running.

32
00:02:16,230 --> 00:02:21,690
Now there's also another factor, which is the amount of memory you've assigned to your function, so

33
00:02:21,690 --> 00:02:27,270
you pay more if you have more memory and that will actually proportionally add more CPU to your function

34
00:02:27,270 --> 00:02:27,690
as well.

35
00:02:28,700 --> 00:02:33,620
So benefits of lambda, all you have no service to manage, it scales continuously.

36
00:02:33,770 --> 00:02:38,960
And that means it's really elastic for use cases where you need your scale, your application to scale

37
00:02:38,960 --> 00:02:41,420
really quickly, you get millisecond billing.

38
00:02:41,420 --> 00:02:45,380
It can be very, very cost effective to run your code using lambda.

39
00:02:45,620 --> 00:02:53,120
It also integrates with almost all other AWS services primary use cases for AWS lambda or data processing,

40
00:02:53,480 --> 00:02:57,470
real time file processing, real time stream processing.

41
00:02:57,710 --> 00:03:03,200
So each of these you might have some data that needs to be analyzed or modified in some way, and that

42
00:03:03,200 --> 00:03:05,540
can be coming in through various different ways.

43
00:03:05,540 --> 00:03:08,210
It could be in a stream like a kinesis data stream.

44
00:03:08,540 --> 00:03:14,300
It could be objects being uploaded to an S3 bucket and in an event driven architecture that will then

45
00:03:14,300 --> 00:03:16,250
automatically trigger the function.

46
00:03:17,060 --> 00:03:22,370
And you might also use it for building serverless backends for web, mobile, IoT and third party

47
00:03:22,520 --> 00:03:23,600
API requests.

48
00:03:23,960 --> 00:03:27,620
Now, there are a few different ways that you can actually invoke your lambda function.

49
00:03:28,130 --> 00:03:30,320
The first is synchronous invocation.

50
00:03:30,650 --> 00:03:34,550
This occurs from the CLI, the SDK or API Gateway.

51
00:03:35,300 --> 00:03:40,130
In this case, you wait for the function to process the event and then it will return a response.

52
00:03:40,280 --> 00:03:43,190
Success or failure error handling will happen.

53
00:03:43,190 --> 00:03:44,110
On the client side.

54
00:03:44,120 --> 00:03:49,550
This is things like retries is simply saying, Well, maybe it failed, so I'm going to try again.

55
00:03:49,850 --> 00:03:53,870
Exponential back off is trying not to overwhelm the application.

56
00:03:54,170 --> 00:03:58,790
So you might sort of back off for greater periods of time if it can't keep up with the processing.

57
00:03:59,060 --> 00:04:01,460
We then have asynchronous invocation.

58
00:04:01,940 --> 00:04:05,900
This is sources like S3, SNS and cloudwatch events.

59
00:04:06,650 --> 00:04:11,210
In this case, the event is queued for processing and a response gets returned immediately.

60
00:04:11,960 --> 00:04:14,360
Lambda will retry up to three times.

61
00:04:14,360 --> 00:04:18,800
If there's any kind of issue, when actually performing the data processing.

62
00:04:18,800 --> 00:04:20,720
The processing must be item impotent.

63
00:04:21,170 --> 00:04:27,080
Now that means that if Lambda does retry multiple times, it cannot end up creating a different result

64
00:04:27,080 --> 00:04:28,790
than the original intended result.

65
00:04:29,090 --> 00:04:31,340
We then have event source mappings.

66
00:04:31,730 --> 00:04:37,220
This is services such as SQS, Kinesis Data Streams, and DynamoDB streams.

67
00:04:37,790 --> 00:04:43,970
In this case, Lambda does the polling, so Lambda is checking with these sources to find if there's

68
00:04:43,970 --> 00:04:45,350
anything that needs to be processed.

69
00:04:45,360 --> 00:04:51,560
So in the case of as it's looking into a Queue and saying, are there any messages to process with data

70
00:04:51,560 --> 00:04:51,950
streams?

71
00:04:51,950 --> 00:04:57,380
It's looking into a data stream and checking whether there are any entries DynamoDB streams, it's

72
00:04:57,380 --> 00:05:01,580
looking for items in the stream and saying, Well, every time there's a new item, I want to pick it

73
00:05:01,580 --> 00:05:02,540
up and process it.

74
00:05:03,260 --> 00:05:07,490
So Lambda is doing the job of actually trying to find things to execute.

75
00:05:07,880 --> 00:05:13,130
This is the other way round from synchronous and asynchronous, where you're actually triggering lambda

76
00:05:13,130 --> 00:05:13,790
to do a job.

77
00:05:14,270 --> 00:05:20,690
Records get processed in order, except for with Esquith standard, because Skews itself does not actually

78
00:05:20,690 --> 00:05:22,310
order the records correctly.

79
00:05:23,240 --> 00:05:26,030
Now, SQS can also trigger lambda.

80
00:05:26,330 --> 00:05:31,880
So we an event source mapping lambda is actually check in and ask, ask you looking for messages and

81
00:05:32,000 --> 00:05:33,560
if it finds them processing them.

82
00:05:34,220 --> 00:05:40,340
But you can also configure a destination through SQS so that when a message gets added to the queue,

83
00:05:41,220 --> 00:05:47,290
SQS is actually then forwarding that onto lambda, and lambda is processing that message.

84
00:05:47,300 --> 00:05:49,010
So there's two different ways that you can do that.

85
00:05:49,280 --> 00:05:52,290
Now, Lambda will actually scale concurrently.

86
00:05:52,310 --> 00:05:59,090
So what that means is you execute your function, and multiple instances of the function can be executed

87
00:05:59,090 --> 00:05:59,960
in parallel.

88
00:06:00,470 --> 00:06:07,070
So if one execution hasn't completed all those different data to process, then Lambda will execute

89
00:06:07,070 --> 00:06:11,870
multiple concurrent instances of your US lambda function.

90
00:06:12,850 --> 00:06:18,880
Now these will be initialized up to the burst or account limit, and just to put a few here on the screen.

91
00:06:19,300 --> 00:06:23,740
It's worth just understanding that they are different for different AWS regions.

92
00:06:24,340 --> 00:06:26,380
So what happens if you reach your limits?

93
00:06:26,390 --> 00:06:31,750
Well, if you reach a concurrency limit or exceed it, then throttling will occur, so it's not going

94
00:06:31,750 --> 00:06:34,300
to allow you to continue scaling.

95
00:06:34,990 --> 00:06:39,610
And you might get a rate exceeded message in your application or a 08:56.

96
00:06:39,760 --> 00:06:41,320
Too many requests exceptions.

97
00:06:41,320 --> 00:06:42,310
So watch out for those.

98
00:06:42,610 --> 00:06:47,650
If you see those in exam questions, that means you've reached one of those limits and you can apply

99
00:06:47,680 --> 00:06:49,330
to increase your account limits.

