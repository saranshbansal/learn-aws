1
00:00:05,220 --> 00:00:05,760
Amazon.

2
00:00:05,760 --> 00:00:15,000
Route 53 is an intelligent DNS service, a domain name system service, and it has a variety of capabilities.

3
00:00:15,360 --> 00:00:21,180
On the left of the screen here, you can see that Route 53 can perform domain registration.

4
00:00:21,180 --> 00:00:28,200
So if you want to register your own domain name, you can use Route 53 and it will charge you a small

5
00:00:28,200 --> 00:00:30,210
fee and register your domain.

6
00:00:30,210 --> 00:00:32,610
And we'll see how that works in the hands on.

7
00:00:32,759 --> 00:00:39,630
When you register a domain such as example dot com, you will then find that a hosted zone is created

8
00:00:39,630 --> 00:00:41,610
for you in a US.

9
00:00:41,640 --> 00:00:49,470
The hosted zone is essentially a container into which your DNS records are added and you can also create

10
00:00:49,470 --> 00:00:54,990
private hosted zones as well for use within the environment with your VPC.

11
00:00:55,440 --> 00:01:00,630
So the hosted zone has the records which need resolution.

12
00:01:00,630 --> 00:01:04,620
You remember from earlier in the course we talked about DNS resolution.

13
00:01:04,620 --> 00:01:10,080
So for example, your computer might need to know the IP address, for example, dot com.

14
00:01:10,080 --> 00:01:14,550
So it checks the hosted zone for example, dot com to find that information.

15
00:01:14,550 --> 00:01:17,610
Amazon Route 53 can also do health checks.

16
00:01:17,610 --> 00:01:23,790
That means it checks endpoints on a regular basis to make sure that they're accessible.

17
00:01:24,000 --> 00:01:28,560
If they're not accessible, that means, you know, there could be a problem and you wouldn't want to

18
00:01:28,560 --> 00:01:31,260
route any connections to those instances.

19
00:01:31,260 --> 00:01:38,010
So what around 53 will do is make sure that once it knows a health check has failed, it will no longer

20
00:01:38,010 --> 00:01:43,080
respond with the addresses that relate to those failed health checks.

21
00:01:43,080 --> 00:01:49,320
There's also a feature called Traffic Flow, where you can build even more intelligence using workflows.

22
00:01:49,860 --> 00:01:53,670
Now let's just have a quick recap on DNS resolution.

23
00:01:54,030 --> 00:02:00,090
So here we have a user, the user wants to connect to the website, for example, dot com.

24
00:02:00,210 --> 00:02:07,080
And we can see here there's a hosted zone called example dot com In Route 53, the hosted zone represents

25
00:02:07,080 --> 00:02:09,840
a set of records belonging to a domain.

26
00:02:09,840 --> 00:02:16,650
The user enters example dot com into their web browser and the computer will then connect to Route 53

27
00:02:16,650 --> 00:02:22,710
and ask the question What's the address for example, dot com That's known as an A record where we're

28
00:02:22,710 --> 00:02:25,860
trying to get the IP address for a name.

29
00:02:25,980 --> 00:02:28,980
Route 53 responds with the IP address.

30
00:02:28,980 --> 00:02:38,130
8.1.2.1 Now the computer knows where to connect to the server on the internet, so it performs an HTTP

31
00:02:38,130 --> 00:02:42,840
get request to 8.1.2.1 and it can view the website.

32
00:02:42,840 --> 00:02:46,110
So that's the basics of how DNS resolution works.

33
00:02:46,110 --> 00:02:49,200
And that is what we're doing with Route 53.

34
00:02:49,620 --> 00:02:57,900
Now, Route 53 is an intelligent DNS service, so it's not just responding in a simple way by providing

35
00:02:57,900 --> 00:03:04,440
a response such as we saw before, there's some additional things that we can do so we can have conditional

36
00:03:04,440 --> 00:03:11,100
responses based on various criteria that is implemented through what's called a routing policy.

37
00:03:11,100 --> 00:03:14,640
Now, the simple routing policy at the top really is simple.

38
00:03:14,640 --> 00:03:16,440
There's not a lot of intelligence there.

39
00:03:16,440 --> 00:03:22,290
It's simply providing the IP address associated with the name, just as we saw in the previous slide.

40
00:03:22,290 --> 00:03:24,300
We then have fail over with.

41
00:03:24,300 --> 00:03:33,480
Fail over Route 53 is checking whether the resources alive based on health checks, Is it responding

42
00:03:33,480 --> 00:03:34,350
to health checks?

43
00:03:34,350 --> 00:03:39,000
If so, I will provide the response to go to the primary server.

44
00:03:39,360 --> 00:03:45,450
If the primary server has failed its health checks, then it will route the connection to a secondary

45
00:03:45,450 --> 00:03:46,470
destination.

46
00:03:46,470 --> 00:03:51,840
So it's failing over because we know that the primary resource is not available.

47
00:03:51,840 --> 00:03:58,890
We then have geolocation which uses the geographic location that the client is in to route the connection

48
00:03:58,890 --> 00:04:05,610
to the closest geographic endpoint geo proximity routes you to the closest region within a specific

49
00:04:05,610 --> 00:04:06,150
area.

50
00:04:06,150 --> 00:04:08,820
We then have latency which is really useful.

51
00:04:08,850 --> 00:04:15,540
What latency does is it tries to work out what is the latency between the various endpoints and send

52
00:04:15,540 --> 00:04:18,180
you to the lowest latency endpoint.

53
00:04:18,269 --> 00:04:24,090
So let's say for example, you have a website deployed on Amazon EC2 in the US East region.

54
00:04:24,390 --> 00:04:29,910
You also have a website with the same information deployed in the Singapore region.

55
00:04:29,910 --> 00:04:35,580
Now if somebody in the United States wants to connect to your website, round 53 is going to send them

56
00:04:35,580 --> 00:04:42,060
to the US East region because it's geographically closer and the latency is likely to be much lower.

57
00:04:42,300 --> 00:04:48,150
Now, if somebody is in South East Asia, they're more likely to be routed to the Singapore instance

58
00:04:48,150 --> 00:04:51,570
because the latency is lower for them to go to Singapore.

59
00:04:51,600 --> 00:04:53,970
Now we also have multi value answer.

60
00:04:54,000 --> 00:05:00,720
It's kind of a bit like load balancing where different IP addresses are returned and so the load gets

61
00:05:00,720 --> 00:05:04,410
spread across the different instances that you have records for.

62
00:05:04,660 --> 00:05:07,710
Lastly, we have weighted which uses relative weights.

63
00:05:07,720 --> 00:05:14,380
So for example, you can configure it such that 80% of the traffic goes to one resource and 20 to another.

64
00:05:14,410 --> 00:05:19,510
It's a great way of testing out some updates before you fully implement them.

65
00:05:19,510 --> 00:05:25,990
It means you can send a subset of your traffic to one resource that's been updated and see what happens.

