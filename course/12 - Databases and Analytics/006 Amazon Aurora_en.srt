1
00:00:05,490 --> 00:00:09,000
Amazon Aurora is a database in the RDS family.

2
00:00:09,270 --> 00:00:15,930
Now, it was developed by AWS themselves, and it has some really great features, especially in durability

3
00:00:15,930 --> 00:00:17,190
and scalability.

4
00:00:17,550 --> 00:00:23,940
Aurora is AWS's fastest growing product, so that really tells you about how powerful it is.

5
00:00:24,390 --> 00:00:31,290
Now, many customers find great use cases for moving off of third-party databases that often have very

6
00:00:31,290 --> 00:00:33,660
expensive licensing and support models.

7
00:00:34,080 --> 00:00:41,160
So, moving on to Aurora can often give them the features they need and the performance they need whilst

8
00:00:41,160 --> 00:00:42,180
lowering costs.

9
00:00:42,690 --> 00:00:45,240
So let's have a look at the key features of Aurora.

10
00:00:45,600 --> 00:00:48,660
As I mentioned, it's a database in the RDS family.

11
00:00:49,020 --> 00:00:52,680
Now, it has two different engines, MySQL and Postgres.

12
00:00:52,950 --> 00:00:55,920
Of course, both of these are relational database engines.

13
00:00:56,310 --> 00:01:03,180
Now it has some really great speed improvements. AWS say five times faster than MySQL and three times

14
00:01:03,180 --> 00:01:04,349
faster than Postgres.

15
00:01:04,739 --> 00:01:08,940
Aurora has a distributed, fault tolerant, and self-healing storage layer.

16
00:01:09,180 --> 00:01:11,550
I'll show you what the architecture looks like shortly.

17
00:01:11,880 --> 00:01:16,920
And you can actually scale right up to 128 TB per database instance.

18
00:01:17,280 --> 00:01:18,300
So that's really big.

19
00:01:18,810 --> 00:01:21,330
So let's have a look at the architecture. Here

20
00:01:21,330 --> 00:01:24,000
we have a region with multiple availability zones.

21
00:01:24,270 --> 00:01:30,870
We have a primary database and then we have one or more replicas. And these replicas can be in different

22
00:01:30,870 --> 00:01:32,100
availability zones,

23
00:01:32,370 --> 00:01:34,050
but they're always within a region.

24
00:01:34,560 --> 00:01:40,680
So these are known as Aurora replicas. And an Aurora replica will always be in the same region.

25
00:01:40,890 --> 00:01:42,660
Now, I mentioned the database layer.

26
00:01:43,020 --> 00:01:46,470
You can see here that we have six copies of our data.

27
00:01:46,800 --> 00:01:52,860
Each of those database icons is representing an individual copy of the database.

28
00:01:52,890 --> 00:01:59,070
The primary and the replicas can all read from the database, but only the primary gets to write to

29
00:01:59,070 --> 00:01:59,910
the database.

30
00:02:00,240 --> 00:02:06,000
And when it does write, it will write across these different copies so that they're always up to date.

31
00:02:06,360 --> 00:02:09,120
So what about the fault tolerance of Aurora?

32
00:02:09,570 --> 00:02:14,550
We get fault tolerance across three availability zones with a single logical volume.

33
00:02:15,120 --> 00:02:22,320
The Aurora replicas scale out read requests, and you can promote an Aurora replica to be the new primary,

34
00:02:22,740 --> 00:02:25,380
or you can create a new primary at any time.

35
00:02:25,740 --> 00:02:33,090
You can also use auto scaling to add replicas, so you have an auto scaling capability for that

36
00:02:33,090 --> 00:02:34,920
read traffic on your database.

37
00:02:35,220 --> 00:02:41,250
So in other words, if you're replicas are experiencing very high read traffic, then you can actually

38
00:02:41,250 --> 00:02:44,610
have an additional replica created for you automatically.

39
00:02:45,000 --> 00:02:50,670
This table includes some of the key features of Aurora. For high performance and scalability.

40
00:02:50,850 --> 00:02:56,940
You get self-healing storage that can scale up to 128 TB per database instance.

41
00:02:57,300 --> 00:03:02,250
You get point in time recovery and continuous backup to Amazon S3 as well.

42
00:03:03,170 --> 00:03:07,880
For database compatibility, we've got MySQL and Postgres databases.

43
00:03:08,240 --> 00:03:14,300
Aurora replicas give you that in-region read scaling that we looked at in the slide previously. And

44
00:03:14,300 --> 00:03:16,100
they can also be a failover target.

45
00:03:16,430 --> 00:03:22,280
Now, you can have up to 15 Aurora replicas and you can use auto scaling for those.

46
00:03:22,670 --> 00:03:25,190
We then have a MySQL read replica.

47
00:03:25,490 --> 00:03:33,200
Now the MySQL read replica is only applicable to MySQL databases. And it gives you a cross region

48
00:03:33,200 --> 00:03:37,160
capability where you can have read scaling in another region.

49
00:03:37,430 --> 00:03:43,580
They can also be a failover target, which means you have that capability to failover to another region.

50
00:03:43,910 --> 00:03:51,140
You can have up to five MySQL read replicas, and they can each have up to 15 Aurora replicas coming

51
00:03:51,140 --> 00:03:51,860
off of them.

52
00:03:52,340 --> 00:03:54,740
There's another feature called global database.

53
00:03:55,040 --> 00:03:57,260
This is a cross region cluster

54
00:03:57,440 --> 00:04:02,540
with read scaling. And you can also remove the secondary and promote it.

55
00:04:02,870 --> 00:04:07,610
So in other words, you can failover to the database that's in another region.

56
00:04:08,090 --> 00:04:14,240
Global database, though, always has the writeable copy in one region, so you're only scaling

57
00:04:14,240 --> 00:04:18,649
read. Multi master allows you to scale out the writes within a region.

58
00:04:18,950 --> 00:04:22,190
So, each Aurora instance will be able to write to

59
00:04:22,190 --> 00:04:27,110
the database. It may not appear on the exam yet because it's fairly new, but watch out for it.

60
00:04:27,710 --> 00:04:32,510
Aurora serverless gives you an on-demand auto scaling configuration for Aurora.

61
00:04:32,810 --> 00:04:39,320
Now, it doesn't support read replicas or public IPs, and you can only access it through VPC or Direct

62
00:04:39,320 --> 00:04:40,850
Connect not for a VPN.

63
00:04:41,300 --> 00:04:46,550
Aurora serverless means that your database is not running all the time, so you're waiting for traffic

64
00:04:46,730 --> 00:04:48,320
and then it gets instantiated.

65
00:04:48,620 --> 00:04:52,820
So, let's just clarify the differences between the two different types of replicas.

66
00:04:53,090 --> 00:04:57,650
So, there's the Aurora replica and the MySQL replica. With Aurora replica,

67
00:04:57,770 --> 00:05:03,770
you get up to 15 replicas from your primary and with MySQL, you can have up to five.

68
00:05:04,100 --> 00:05:10,550
The replication type is asynchronous for both types of replicas, but the actual latency is lower in

69
00:05:10,550 --> 00:05:15,020
the milliseconds for Aurora versus seconds with the MySQL replica.

70
00:05:15,680 --> 00:05:21,830
Performance impact is low on Aurora, but it's higher on replicas using MySQL.

71
00:05:22,100 --> 00:05:26,210
So just bear that in mind. It's actually using replication in the database engine

72
00:05:26,450 --> 00:05:32,360
so it does put a performance impact on your database. With Aurora replicas they're in-region,

73
00:05:32,630 --> 00:05:38,420
whereas with MySQL, they can be cross-region. Both types of replicas can be a failover target,

74
00:05:38,750 --> 00:05:40,280
but you'll get less data loss.

75
00:05:40,280 --> 00:05:46,520
You get no data loss with an Aurora replica, whereas you can potentially have up to minutes of data

76
00:05:46,520 --> 00:05:48,740
loss with a MySQL replica.

77
00:05:49,130 --> 00:05:53,990
The failover is automatic with the Aurora replica, and it's not with MySQL.

78
00:05:54,230 --> 00:05:58,910
And then the MySQL replica does have a couple of additional features at the bottom there as well,

79
00:05:59,060 --> 00:06:04,520
which aren't supported by Aurora replicas. So quite a lot to digest about Aurora.

80
00:06:04,700 --> 00:06:10,220
But as I say, is a really important product in AWS. And in the next lesson, we're going to have a look

81
00:06:10,220 --> 00:06:13,340
in more detail at the various different deployment options.

