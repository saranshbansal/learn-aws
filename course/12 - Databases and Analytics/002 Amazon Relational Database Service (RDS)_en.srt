1
00:00:05,100 --> 00:00:10,070
In this lesson I'm going to cover the Amazon Relational Database Service, RDS.

2
00:00:10,562 --> 00:00:14,535
So, RDS is a managed relational database.

3
00:00:14,560 --> 00:00:20,838
Now, it runs on EC2 instances, and that means you need to choose your instance type

4
00:00:20,862 --> 00:00:26,680
to determine the performance characteristics for your database, the CPU, the memory,

5
00:00:26,704 --> 00:00:27,730
the storage and so on.

6
00:00:28,710 --> 00:00:31,250
Now, what types of database engines can we run?

7
00:00:31,440 --> 00:00:33,250
Well, the first one is called Aurora.

8
00:00:33,300 --> 00:00:38,335
That's the subject of another lesson. That's a proprietary AWS database.

9
00:00:38,520 --> 00:00:45,145
Then you've got MySQL, MariaDB, Oracle, Microsoft SQL Server, and Postgres.

10
00:00:45,420 --> 00:00:46,930
So quite a few to choose from.

11
00:00:47,250 --> 00:00:51,614
Now, if the database you need is not on the list, you can't use RDS.

12
00:00:51,639 --> 00:00:54,157
You have to install it on EC2.

13
00:00:54,470 --> 00:00:57,777
With RDS, we can scale a couple of different ways.

14
00:00:57,810 --> 00:01:03,140
So scaling up, scaling vertically is where we change our instance type.

15
00:01:03,390 --> 00:01:09,814
So here we've moved from a db.m4.large with two CPUs and 8GB RAM

16
00:01:09,973 --> 00:01:16,070
up to the M4, which has more processing power and more RAM associated with it.

17
00:01:16,890 --> 00:01:18,273
So that scaling up.

18
00:01:19,018 --> 00:01:24,113
Now we can also scale out for some specific performance characteristics.

19
00:01:24,471 --> 00:01:28,369
And we can also implement disaster recovery so we can have some

20
00:01:28,393 --> 00:01:33,436
high availability fault tolerance and disaster recovery for our applications.

21
00:01:33,750 --> 00:01:34,862
So how does that work?

22
00:01:35,190 --> 00:01:37,828
We have something called an RDS master.

23
00:01:38,006 --> 00:01:43,261
So this is running in an availability zone and this is our primary database.

24
00:01:43,286 --> 00:01:47,250
It's the one on which both reads and writes get performed.

25
00:01:48,090 --> 00:01:50,827
We can then have a standby instance.

26
00:01:51,120 --> 00:01:56,281
Now the master will synchronously replicate to the standby instance.

27
00:01:56,550 --> 00:02:00,193
So the stand-by is always in sync with the master.

28
00:02:00,600 --> 00:02:03,041
Now this is known as multi-AZ.

29
00:02:03,359 --> 00:02:08,940
And you essentially have a passive standby which is used for disaster recovery.

30
00:02:09,479 --> 00:02:17,165
So that means in a dire situation, when the master fails or becomes inaccessible, then the standby

31
00:02:17,190 --> 00:02:18,780
can take over it automatically.

32
00:02:19,020 --> 00:02:21,870
We also have a Read Replica.

33
00:02:22,290 --> 00:02:27,679
Now, Read Replicas use asynchronous replication, so there's a little bit more of a delay

34
00:02:28,326 --> 00:02:34,357
but they replicate from the master as well and they're used for scaling reads.

35
00:02:34,382 --> 00:02:37,288
That means scaling the queries on your database.

36
00:02:37,320 --> 00:02:42,743
So this is a way of scaling out, scaling horizontally, but only for queries.

37
00:02:42,990 --> 00:02:44,795
So that's important to remember.

38
00:02:44,820 --> 00:02:50,803
The Read Replica is used for queries, the writes still always go to the master database.

39
00:02:51,180 --> 00:02:57,778
So here we have our app server and we can see in green all writes are going to the master, but reads

40
00:02:57,803 --> 00:03:04,617
can instead go to the Read Replica so that we can scale and offload a bit of the performance impact

41
00:03:04,642 --> 00:03:06,290
from the master to the replica.

42
00:03:06,510 --> 00:03:08,492
So that's how that all works.

43
00:03:08,610 --> 00:03:10,520
Now a little bit more about RDS.

44
00:03:10,520 --> 00:03:16,710
So, just to recap, it does run on EC2 instances, so you have to choose the correct family and type.

45
00:03:17,040 --> 00:03:20,109
It's a relational SQL type of database.

46
00:03:20,400 --> 00:03:26,253
It's usually used for transactional use cases, so an operational database or OLTP.

47
00:03:26,830 --> 00:03:28,655
Easy to set up, highly available.

48
00:03:28,680 --> 00:03:30,930
It's fault tolerant and scalable as well.

49
00:03:31,560 --> 00:03:38,363
So here you would use it for all sorts of operational and transactional use cases such as online stores

50
00:03:38,430 --> 00:03:41,135
and banking systems just to name a couple.

51
00:03:41,300 --> 00:03:47,440
You can encrypt your Amazon RDS databases as well, and that enables encryption at rest.

52
00:03:47,440 --> 00:03:49,010
So the storage is encrypted.

53
00:03:49,350 --> 00:03:52,159
You can also encrypt your connections to RDS.

54
00:03:52,804 --> 00:03:57,293
An encryption uses the AWS Key Management Service, KMS.

55
00:03:57,500 --> 00:04:00,330
Now, RDS supports the following database engines.

56
00:04:00,330 --> 00:04:01,237
We covered these earlier.

57
00:04:01,262 --> 00:04:08,276
So just remember SQL, Oracle, MySQL, Postgres, and Aurora as well as MariaDB.

58
00:04:08,622 --> 00:04:11,824
And it scales up by increasing the instance size.

59
00:04:12,056 --> 00:04:17,394
And Read Replicas are a good option for Read heavy workload, so you can scale the performance

60
00:04:17,418 --> 00:04:18,586
horizontally as well.

61
00:04:18,660 --> 00:04:23,010
And lastly, we have disaster recovery with the Multi-AZ option.

62
00:04:23,160 --> 00:04:24,630
So that's it for the theory.

63
00:04:24,655 --> 00:04:29,300
Let's go into some hands-on in the next lesson and launch an RDS database.

