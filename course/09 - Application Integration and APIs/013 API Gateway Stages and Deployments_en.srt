1
00:00:05,340 --> 00:00:09,370
In this lesson, you'll learn about API Gateway stages and deployments.

2
00:00:10,140 --> 00:00:15,450
So deployments are a snapshot of the APIs, resources, and methods.

3
00:00:15,580 --> 00:00:22,500
Deployments must be created and associated with a stage for anyone to access the API.

4
00:00:23,040 --> 00:00:26,910
And a stage is a logical reference to a lifecycle state

5
00:00:27,020 --> 00:00:29,660
of your REST or Websocket API.

6
00:00:30,040 --> 00:00:35,503
For example, it might be a dev, prod, beta, V2 stage etc.

7
00:00:36,240 --> 00:00:41,550
API stages are identified by API ID and the stage name.

8
00:00:41,940 --> 00:00:46,670
Stage variables are like environment variables for API Gateway.

9
00:00:47,020 --> 00:00:50,200
And they can be used in Lambda function ARNs,

10
00:00:50,320 --> 00:00:54,100
HTTP endpoints, and parameter mapping templates.

11
00:00:54,350 --> 00:00:58,160
So let's have a look visually to understand what I'm talking about here.

12
00:00:58,540 --> 00:01:00,960
So we've got an API called My API.

13
00:01:01,340 --> 00:01:03,900
It has some methods and resources.

14
00:01:04,440 --> 00:01:10,140
We then create a stage from that API. And this is called our development stage.

15
00:01:10,460 --> 00:01:13,720
And it has a specific endpoint URL.

16
00:01:13,730 --> 00:01:17,290
For this particular stage we can then set up some settings

17
00:01:17,650 --> 00:01:20,320
like the caching and the throttling settings and so on.

18
00:01:21,240 --> 00:01:23,810
Then we might create a production stage.

19
00:01:24,120 --> 00:01:31,440
This will have also its own individual unique URL for accessing this endpoint.

20
00:01:31,720 --> 00:01:34,750
And it will also have its own settings

21
00:01:34,860 --> 00:01:38,460
for things like caching and throttling and various other settings.

22
00:01:39,040 --> 00:01:42,780
So as an example here we might want to turn off the cache on the

23
00:01:42,780 --> 00:01:47,830
development stage to save cost but turn it on for production to increase performance.

24
00:01:48,070 --> 00:01:51,460
So what are the use cases for stage variables?

25
00:01:51,840 --> 00:01:54,500
Well you can configure HTTP endpoints

26
00:01:54,510 --> 00:01:58,560
your stages talk to such as dev, test, prod and so on.

27
00:01:58,940 --> 00:02:04,490
You can pass configuration parameters to AWS Lambda through mapping templates.

28
00:02:05,040 --> 00:02:10,560
And stage variables are passed to the context object in AWS Lambda.

29
00:02:11,240 --> 00:02:13,750
They're also used with Lambda aliases.

30
00:02:14,240 --> 00:02:17,260
You can create a stage variable to indicate the

31
00:02:17,260 --> 00:02:20,940
corresponding Lambda alias you want to connect to.

32
00:02:21,270 --> 00:02:26,431
Now I mentioned earlier that you can import swagger and OpenAPI 3 definitions

33
00:02:26,455 --> 00:02:29,450
written in YAML or JSON's API Gateway.

34
00:02:29,840 --> 00:02:36,050
This is a common way of defining rest APIs using API definition as code.

35
00:02:36,540 --> 00:02:41,685
You can also export your current APIs from API Gateway as swagger

36
00:02:41,709 --> 00:02:44,850
or OpenAPI 3 definition files.

37
00:02:44,940 --> 00:02:49,225
This capability uses the API Gateway import API feature

38
00:02:49,249 --> 00:02:53,080
to import an API from an external definition.

39
00:02:53,340 --> 00:02:58,850
And you specify the options using a mode query parameter in the request URL.

40
00:02:59,340 --> 00:03:04,820
And just to finish off, here's an example of a template for a swagger 2.0 API.

41
00:03:05,130 --> 00:03:11,440
So this could be imported into API Gateway to create a REST API from a definition

42
00:03:11,550 --> 00:03:14,610
that you might have exported from some other API

43
00:03:14,750 --> 00:03:17,160
that you're using that is based on swagger

