1
00:00:05,150 --> 00:00:08,568
In this lesson, we're going to cover CodeCommit and CodePipeline.

2
00:00:08,593 --> 00:00:10,556
So we saw the basic process before.

3
00:00:10,581 --> 00:00:15,744
We have developers, we can have multiple developers working on a repository and committing code to

4
00:00:15,769 --> 00:00:16,756
CodeCommit.

5
00:00:16,880 --> 00:00:22,970
So CodeCommit is a fully managed source control service and it hosts secure Git-based repository.

6
00:00:22,980 --> 00:00:27,062
So it's fully compatible with Git. You can use Git on the client side.

7
00:00:27,086 --> 00:00:33,340
Git is an open source distributed source control system and it's the most popular option available.

8
00:00:33,890 --> 00:00:39,268
It has a centralized repository for all your code, your binaries, your images and your libraries,

9
00:00:39,452 --> 00:00:43,790
and it can track and manage code changes and maintain version history as well.

10
00:00:44,120 --> 00:00:46,820
It will also manage updates from multiple sources.

11
00:00:46,850 --> 00:00:51,387
So again, we can have multiple people working on a project and it will manage all that for you.

12
00:00:51,620 --> 00:00:56,083
And that means you can have collaborative work being done in a team of developers.

13
00:00:56,263 --> 00:01:00,350
CodeCommit repositories are private and it scales seamlessly.

14
00:01:00,830 --> 00:01:05,901
It's integrated with Jenkins, CodeBuild and other continuous integration tools as well.

15
00:01:06,260 --> 00:01:11,957
And you can transfer your files to and from CodeCommit using HTTPS and SSH.

16
00:01:12,215 --> 00:01:17,629
Your repositories are automatically encrypted with AWS KMS and you can have your own

17
00:01:17,653 --> 00:01:19,870
customer specific keys for that as well.

18
00:01:20,240 --> 00:01:24,718
You have to configure your Git client to communicate with CodeCommit repositories and we'll see how

19
00:01:24,743 --> 00:01:26,059
to do that in the hands-on.

20
00:01:26,697 --> 00:01:31,118
IAM supports CodeCommit and there's a couple of different types of credentials.

21
00:01:31,310 --> 00:01:37,785
You've got to Git credentials which are generated by IAM and has a username and password pair,

22
00:01:38,252 --> 00:01:40,700
and that's for use over HTTPS.

23
00:01:41,278 --> 00:01:47,589
We've then got SSH keys, which can be associated with your IAM user accounts and that's for using SSH

24
00:01:47,614 --> 00:01:48,429
obviously.

25
00:01:48,581 --> 00:01:54,020
We then have AWS Access Keys as well and those can be used with HTTPS.

26
00:01:54,145 --> 00:01:56,600
CodePipeline is a continuous delivery service.

27
00:01:56,600 --> 00:02:02,602
So this is going to automate the entire release pipeline for your code from commit right the way through

28
00:02:02,627 --> 00:02:03,565
to deployment.

29
00:02:03,590 --> 00:02:09,350
So it'll automate, build, test and deploy phases and every time you make a code change, it will automate

30
00:02:09,530 --> 00:02:10,818
the entire process for you.

31
00:02:10,842 --> 00:02:12,694
We'll see this in the hands-on.

32
00:02:12,830 --> 00:02:16,054
It can also work with multiple third party options.

33
00:02:16,190 --> 00:02:21,963
Things like your source stage could be S3, CodeCommit, GitHub, ECR or Bitbucket.

34
00:02:22,621 --> 00:02:27,471
For build you can use CodeBuild or Jenkins and for deploy you can use CloudFormation,

35
00:02:27,589 --> 00:02:32,810
CodeDeploy, ECS, Elastic Beanstalk, AWS Service Catalog and S3.

36
00:02:33,230 --> 00:02:35,923
Let's look at some of the concepts for CodePipeline.

37
00:02:36,423 --> 00:02:40,730
Pipelines are the workflow that describes how software changes are released.

38
00:02:40,910 --> 00:02:42,151
You'll see how it works.

39
00:02:42,176 --> 00:02:48,893
We connect the different phases, so the source control to the build and test and then to the deployment.

40
00:02:50,260 --> 00:02:55,660
We then have artifacts and these are files or changes that get worked on by the actions and stages

41
00:02:55,685 --> 00:02:56,600
in the pipeline.

42
00:02:56,890 --> 00:03:02,080
Each pipeline stage can create some kind of artifacts and they're passed and stored in S3

43
00:03:02,105 --> 00:03:03,100
for the next stage.

44
00:03:03,550 --> 00:03:04,615
Then we have the stage.

45
00:03:04,640 --> 00:03:11,860
So the pipeline is broken up into multiple stages and each one can be a sequence of actions and parallel

46
00:03:11,885 --> 00:03:12,572
actions.

47
00:03:12,700 --> 00:03:16,220
And obviously a good example of this would be build, test and deploy.

48
00:03:16,390 --> 00:03:19,194
And then you might have some kind of load testing in there as well.

49
00:03:19,270 --> 00:03:22,355
You could also define manual approval steps at any stage.

50
00:03:22,660 --> 00:03:24,177
We then have the actions.

51
00:03:24,201 --> 00:03:28,685
Stages contain at least one action and they can affect the artifacts and we'll

52
00:03:28,710 --> 00:03:30,817
have artifacts as inputs or outputs.

53
00:03:31,120 --> 00:03:35,333
And we then have transitions, which is about progressing from one stage to another.

54
00:03:35,980 --> 00:03:41,160
Now, what we're going to do in a hands on very soon is CodePipeline with Elastic Beanstalk.

55
00:03:41,170 --> 00:03:42,910
So let's look at what that would look like.

56
00:03:43,570 --> 00:03:48,987
We have our developer, CodeCommit, and then Beanstalk and we put that into a pipeline.

57
00:03:49,494 --> 00:03:54,349
So the developer will commit some code and the code gets pushed through to Elastic Beanstalk.

58
00:03:54,540 --> 00:03:57,356
And we'll see how we can automate this entire process.

59
00:03:57,850 --> 00:04:03,888
Beanstalk will then update the application and deploy whatever update we've made in our code through to

60
00:04:03,913 --> 00:04:05,000
our application.

