1
00:00:05,240 --> 00:00:05,920
In this lesson,

2
00:00:05,920 --> 00:00:10,940
I'll cover some best practices for developing and working with Lambda functions.

3
00:00:11,050 --> 00:00:16,239
Now, I'm going to focus on the best practices around developing function code.

4
00:00:16,370 --> 00:00:19,883
There are some more best practices that's useful to know for the exam

5
00:00:19,930 --> 00:00:23,750
and you can find those in the reference link that's attached to this lesson.

6
00:00:24,540 --> 00:00:29,250
So let's have a look at some best practices for how we write our function code.

7
00:00:29,840 --> 00:00:35,260
Firstly, AWS recommend that you separate the Lambda handler from your core logic.

8
00:00:35,990 --> 00:00:39,060
That allows you to make a more unit testable function.

9
00:00:39,500 --> 00:00:44,050
So for example, in this code here, which is based on Node.js,

10
00:00:44,220 --> 00:00:47,800
the core logic is separated from the Lambda handler.

11
00:00:48,120 --> 00:00:50,730
So we've got the handler specified up here

12
00:00:50,940 --> 00:00:53,060
and then we separate out the core logic.

13
00:00:53,930 --> 00:00:58,620
The next best practice is to take advantage of execution environment

14
00:00:58,620 --> 00:01:01,460
reuse to improve the performance of your function.

15
00:01:02,100 --> 00:01:06,330
This means you might initialize SDK clients and database connections

16
00:01:06,480 --> 00:01:08,420
outside of the function handler.

17
00:01:08,680 --> 00:01:12,860
You might cache static assets locally in the /TMP directory.

18
00:01:13,340 --> 00:01:16,760
And this means that subsequent invocations processed by the

19
00:01:16,760 --> 00:01:20,450
same instance of your function can reuse those resources.

20
00:01:21,040 --> 00:01:24,400
And that can save cost by reducing function runtime.

21
00:01:24,820 --> 00:01:29,220
You should also use a keep alive directive to maintain persistent connections.

22
00:01:29,390 --> 00:01:32,750
After a period of time, Lambda purges idle connections.

23
00:01:32,890 --> 00:01:36,360
So if you try and reuse them then that can result in an error.

24
00:01:37,440 --> 00:01:41,690
Next you should use environment variables to pass operational parameters

25
00:01:41,810 --> 00:01:42,750
to your function.

26
00:01:43,240 --> 00:01:47,220
For example, use environment variables instead of hard coding

27
00:01:47,270 --> 00:01:49,360
S3 bucket names in your code.

28
00:01:50,640 --> 00:01:55,140
Next, control the dependencies in your functions deployment package.

29
00:01:55,430 --> 00:01:59,620
Now, libraries and runtimes in the execution environment are managed by

30
00:01:59,630 --> 00:02:03,290
Lambda itself and they can get updated at any time.

31
00:02:03,400 --> 00:02:06,390
And that could cause issues with your code because

32
00:02:06,390 --> 00:02:09,820
the runtimes and the libraries that it's dependent on

33
00:02:10,008 --> 00:02:14,830
may change, whereas you haven't updated your code to reflect any

34
00:02:14,830 --> 00:02:16,660
changes you need to make to your code.

35
00:02:17,040 --> 00:02:18,410
So to avoid those errors,

36
00:02:18,410 --> 00:02:22,160
you can package your own dependencies in the deployment package.

37
00:02:22,690 --> 00:02:26,990
And that means you then have full management control of those dependencies.

38
00:02:27,540 --> 00:02:32,040
You should also minimize your deployment package size to its runtime necessities.

39
00:02:32,350 --> 00:02:34,000
That will reduce the amount of time

40
00:02:34,000 --> 00:02:36,670
it takes for deployment packages to get downloaded

41
00:02:36,800 --> 00:02:39,510
and then unpacked ahead of invocation.

42
00:02:40,340 --> 00:02:43,840
You should also avoid using recursive code in your function.

43
00:02:44,090 --> 00:02:48,970
So don't use code that calls itself until an arbitrary criteria is met.

44
00:02:49,320 --> 00:02:53,750
That can cause large volumes of invocations and of course that will increase cost.

45
00:02:54,240 --> 00:02:57,160
And that's it for this lesson, there are more best practices.

46
00:02:57,160 --> 00:03:01,430
So please follow the link attached to this lesson and just give it a few minutes

47
00:03:01,430 --> 00:03:03,440
to read through and understand some of the

48
00:03:03,440 --> 00:03:06,710
best practices around working with Lambda functions

49
00:03:06,710 --> 00:03:10,290
in addition to these recommendations for how you work with the code.

