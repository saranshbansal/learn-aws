1
00:00:05,450 --> 00:00:12,470
Amazon Cognito is principally used for adding sign in and sign-up functionality to web and mobile

2
00:00:12,470 --> 00:00:15,650
applications, so that's the first thing to remember about Cognito.

3
00:00:16,400 --> 00:00:19,550
Then we need to understand the different pools.

4
00:00:19,550 --> 00:00:23,720
We have user pools and identity pools, and I'm going to show you what those are.

5
00:00:25,000 --> 00:00:27,580
So firstly, we have a Cognito user pool.

6
00:00:28,120 --> 00:00:34,540
Let's say we have a client or mobile application and we have an API Gateway. Behind that API Gateway

7
00:00:34,690 --> 00:00:37,390
we have AWS services we want to connect to.

8
00:00:38,320 --> 00:00:40,210
So, that's used for the application.

9
00:00:40,870 --> 00:00:42,880
Then we have a Cognito user pool.

10
00:00:43,240 --> 00:00:49,270
This is where our identities are stored or it's where we federate to an identity source.

11
00:00:49,630 --> 00:00:53,800
So this is where it really starts to become a little confusing because as I mentioned, there's user

12
00:00:53,800 --> 00:00:55,420
pools and identity pools.

13
00:00:55,810 --> 00:00:58,780
So you've got to remember that the identities are in the user pool.

14
00:00:59,440 --> 00:01:03,400
The actual identity pool is used for getting temporary credentials.

15
00:01:03,400 --> 00:01:04,360
We'll see that in a moment.

16
00:01:05,110 --> 00:01:12,040
So, the client or mobile application is going to use the user pool for signing in or signing up.

17
00:01:12,250 --> 00:01:17,470
Basically, that's going to be where the credentials in the user account is stored for this client or

18
00:01:17,470 --> 00:01:18,550
mobile application.

19
00:01:19,180 --> 00:01:21,970
So the user authenticates using the user pool.

20
00:01:22,390 --> 00:01:25,480
And in this case, receive something called a Java Web token.

21
00:01:25,960 --> 00:01:34,570
The JWT can then be passed on to API Gateway, so a Cognito is essentially acting as an identity broker

22
00:01:34,570 --> 00:01:37,600
between the IDP and AWS.

23
00:01:38,260 --> 00:01:41,110
Then we can connect to AWS Lambda.

24
00:01:41,110 --> 00:01:47,500
In this case, something called a Lambda authorizer is able to accept and process the JWT.

25
00:01:52,010 --> 00:01:58,340
Now, as I mentioned, our identities can be stored in the user pool or we can actually federate to

26
00:01:58,340 --> 00:02:03,680
an identity provider like a social IDP like Facebook or Apple or Amazon or Google.

27
00:02:04,460 --> 00:02:05,570
So that's user pools.

28
00:02:06,080 --> 00:02:07,670
Now let's look at identity pools.

29
00:02:08,000 --> 00:02:11,950
So let's say we want to get authorized access to Lambda or DynamoDB.

30
00:02:12,770 --> 00:02:15,050
So we have a Cognito identity pool.

31
00:02:15,680 --> 00:02:22,580
The identity pool is used to obtain temporary, limited privileged credentials for the AWS services,

32
00:02:22,580 --> 00:02:26,060
so it uses the AWS STS service to do that.

33
00:02:26,920 --> 00:02:28,180
We then have a user pool.

34
00:02:28,720 --> 00:02:30,610
This is where the identities are stored.

35
00:02:30,880 --> 00:02:34,960
So remember, identities can come from a user pool. They don't have to.

36
00:02:35,080 --> 00:02:41,470
You can actually federate to an identity pool directly, but you can store identities in a user pool.

37
00:02:41,480 --> 00:02:42,580
You can create and store them

38
00:02:42,580 --> 00:02:46,240
there or federate the user pool to a social IDP as well.

39
00:02:46,870 --> 00:02:50,890
So, this user pool might be federated to one of these social ID providers.

40
00:02:51,460 --> 00:02:55,390
Now, once the user is authenticated using the Cognito user pool,

41
00:02:55,870 --> 00:03:00,370
they then need to be able to get some credentials for AWS.

42
00:03:00,640 --> 00:03:03,010
So, they go to the Cognito Identity Pool.

43
00:03:03,580 --> 00:03:11,290
The identity pool then uses the AWS STS service to obtain the temporary credentials, and a role is assumed.

44
00:03:11,740 --> 00:03:15,940
Then, once the role is assumed, we can access the AWS services.

45
00:03:16,960 --> 00:03:19,330
So let's have a look at these put together in another way.

46
00:03:19,750 --> 00:03:21,700
We've got a client mobile application.

47
00:03:22,000 --> 00:03:24,250
We've got a region with some services running in it.

48
00:03:24,760 --> 00:03:29,920
We've got a user pool and we've got an identity pool. And we've got a social IDP that's connected to

49
00:03:29,920 --> 00:03:31,030
our user pool as well.

50
00:03:31,870 --> 00:03:35,360
So the first step here is we need to get the JWT.

51
00:03:35,890 --> 00:03:42,730
So, the client application authenticates and gets the tokens from the Cognito user pool and then exchanges

52
00:03:42,730 --> 00:03:49,900
those tokens for AWS credentials using the identity pool, and then uses those credentials to access the

53
00:03:49,900 --> 00:03:51,820
services on AWS.

54
00:03:52,120 --> 00:03:53,560
So, that's how it all works.

55
00:03:53,590 --> 00:03:59,020
I think the key thing to really understand is the difference between user pools and identity pools.

56
00:03:59,020 --> 00:04:01,750
Don't go into the exam until you're clear about the differences.

57
00:04:02,140 --> 00:04:09,510
So remember, the user pools are where you can create your users, your identities or you can federate it

58
00:04:09,520 --> 00:04:17,200
to a social IDP. The identity pool is principally responsible for getting the temporary credentials

59
00:04:17,200 --> 00:04:19,600
from the IWS STS service.

