1
00:00:05,040 --> 00:00:10,310
When searching for data in our DynamoDB tables we can use the scan API

2
00:00:10,320 --> 00:00:11,890
and the query API.

3
00:00:11,900 --> 00:00:15,320
And these come up in exam questions where you need to know

4
00:00:15,360 --> 00:00:18,150
the benefits and drawbacks of each and when to use them.

5
00:00:18,640 --> 00:00:20,760
So let's start with the scan API.

6
00:00:21,240 --> 00:00:24,820
The scan operation returns one or more items and attributes

7
00:00:24,820 --> 00:00:29,716
by accessing every item in a table or a secondary index.

8
00:00:29,740 --> 00:00:36,160
To have DynamoDB return fewer items, you can provide a filter expression operation.

9
00:00:36,400 --> 00:00:40,870
Now note that accessing every item in a table or secondary

10
00:00:40,870 --> 00:00:45,550
index does incur costs because we're actually reading those items.

11
00:00:46,140 --> 00:00:50,950
A single scan operation reads up to the maximum number of items set if you use

12
00:00:51,060 --> 00:00:54,450
the limit parameter or a maximum of one megabyte.

13
00:00:55,030 --> 00:01:01,540
Scan APIs can use a lot of RCUs as they access every single item in your table.

14
00:01:01,820 --> 00:01:04,660
Scan operations proceed sequentially.

15
00:01:05,040 --> 00:01:08,330
Applications can request parallel scans using

16
00:01:08,330 --> 00:01:10,950
the segment and total segments parameters.

17
00:01:11,610 --> 00:01:16,880
The scan uses eventually consistent reads when accessing the data in a table.

18
00:01:17,340 --> 00:01:21,565
If you need a consistent copy of the data as of the time the scam begins

19
00:01:21,590 --> 00:01:24,750
you can set the consistent read parameter to true.

20
00:01:25,140 --> 00:01:27,250
So let's see what happens with a scan.

21
00:01:27,580 --> 00:01:31,260
In this case, the developer has sent a scan API request.

22
00:01:31,640 --> 00:01:36,391
And in this case there's only a few items in our table but all of them are actually

23
00:01:36,415 --> 00:01:37,280
accessed.

24
00:01:37,280 --> 00:01:40,620
Of course in a big table that's going to be a lot of RCUs.

25
00:01:40,710 --> 00:01:43,040
And then the results are returned.

26
00:01:43,130 --> 00:01:47,150
Now in this case, all items and all attributes are returned.

27
00:01:47,190 --> 00:01:50,660
You can use a scan with a projection expression.

28
00:01:51,140 --> 00:01:53,810
In this example, the scan returns all posts in

29
00:01:53,810 --> 00:01:59,020
the forum that were posted within a date range and they have more than 50 replies.

30
00:01:59,540 --> 00:02:03,690
So this is the scan. You can see here, we're doing this through the console.

31
00:02:03,790 --> 00:02:05,350
We're choosing a scan,

32
00:02:05,670 --> 00:02:07,830
sorting by post ID,

33
00:02:08,070 --> 00:02:10,850
filtering by replies and last post time.

34
00:02:11,240 --> 00:02:15,110
And we've got a date range here and a max number of replies.

35
00:02:15,450 --> 00:02:19,220
So let's see what a scan API with a projection expression looks like.

36
00:02:19,530 --> 00:02:22,800
So we issue the scan API with our projection expression.

37
00:02:23,340 --> 00:02:28,830
In this case, all of the items in the table are accessed using lots of RCUs.

38
00:02:29,540 --> 00:02:33,230
But in the results, select attributes are returned.

39
00:02:33,370 --> 00:02:35,310
Next we have the query API.

40
00:02:35,570 --> 00:02:39,360
A query operation finds items in your table based on the

41
00:02:39,360 --> 00:02:43,100
primary key attribute and a distinct value to search for.

42
00:02:43,540 --> 00:02:48,700
So for example, you might search for the user ID and then all attributes related

43
00:02:48,850 --> 00:02:51,080
to that item would be returned.

44
00:02:51,540 --> 00:02:56,040
You can optionally use a sort key name and value to refine the results.

45
00:02:56,390 --> 00:02:59,290
So for example, if you're sort key is a timestamp,

46
00:02:59,300 --> 00:03:01,290
you can refine the query to only select

47
00:03:01,300 --> 00:03:04,700
items with a timestamp within the last seven days.

48
00:03:05,340 --> 00:03:08,570
All attributes are returned for the items by default.

49
00:03:08,740 --> 00:03:13,871
You can also use the projection expression parameter as we did with the scan API

50
00:03:13,896 --> 00:03:17,025
to just return the select attributes we need.

51
00:03:17,049 --> 00:03:19,740
By default, queries are eventually consistent.

52
00:03:19,750 --> 00:03:24,060
To use strongly consistent you need to explicitly set this in the query.

53
00:03:24,440 --> 00:03:26,690
So let's look at using a query API.

54
00:03:26,800 --> 00:03:31,360
A developer uses a query API request with a projection expression.

55
00:03:31,950 --> 00:03:36,520
Now in this case, select items with select attributes to access,

56
00:03:36,680 --> 00:03:39,510
consuming far fewer RCUs.

57
00:03:39,800 --> 00:03:41,700
And then those results are returned.

58
00:03:41,970 --> 00:03:46,150
In another example, the query returns only items with the client ID

59
00:03:46,150 --> 00:03:51,045
of chris@example.com that were created within a certain date range

60
00:03:51,069 --> 00:03:53,450
and that are in the category of pen.

61
00:03:53,940 --> 00:03:57,690
So here we can see how we're creating the query through the console.

62
00:03:57,700 --> 00:04:02,760
We've chosen the product orders table with client ID and created,

63
00:04:03,140 --> 00:04:07,328
we've specified as the string here chrisexample.com

64
00:04:07,352 --> 00:04:09,560
and then between a specific date range.

65
00:04:10,040 --> 00:04:13,540
We've also specified a filter for the category which

66
00:04:13,540 --> 00:04:16,130
is a string and it's equal to pen.

67
00:04:16,350 --> 00:04:17,700
So that's it for this lesson.

68
00:04:17,700 --> 00:04:21,394
Make sure you fully understand the differences between the scan

69
00:04:21,420 --> 00:04:24,880
and the query API before you sit the exam.

