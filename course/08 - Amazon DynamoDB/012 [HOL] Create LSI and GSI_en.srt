1
00:00:05,340 --> 00:00:08,250
Hi guys. In this lesson, we're going to look at how we can create

2
00:00:08,260 --> 00:00:12,260
a local secondary index and a global secondary index.

3
00:00:12,940 --> 00:00:16,950
Back in the DynamoDB console, I've selected my table.

4
00:00:17,340 --> 00:00:19,140
And if we go to indexes,

5
00:00:19,350 --> 00:00:22,650
you'll see that we're able to create a global secondary index.

6
00:00:22,650 --> 00:00:26,390
But there's no option to create a local secondary index.

7
00:00:26,670 --> 00:00:31,270
Now that's because we must create the LSIs at table creation time.

8
00:00:31,280 --> 00:00:35,510
So really important to understand that. That comes up in lots of exam questions.

9
00:00:35,520 --> 00:00:40,340
You need to know that you can create a GSI at any time, but the LSI

10
00:00:40,340 --> 00:00:43,950
is only creatable at the table creation time.

11
00:00:44,343 --> 00:00:46,750
So what I'm going to do is I'm going to delete this table.

12
00:00:47,140 --> 00:00:52,360
And let's just type delete and we're going to recreate our table but with an LSI.

13
00:00:52,740 --> 00:00:54,360
So that deleted very quickly.

14
00:00:54,800 --> 00:00:56,960
Let's now create a new table.

15
00:00:57,640 --> 00:01:01,450
And it's basically going to have the same name. It's going to be called My Store.

16
00:01:01,940 --> 00:01:04,970
Partition key will be client ID

17
00:01:06,040 --> 00:01:09,500
and the sort key will be created just as before.

18
00:01:09,520 --> 00:01:12,550
Now, if we choose customized settings,

19
00:01:13,440 --> 00:01:15,690
scroll down, leave all these as they are,

20
00:01:15,950 --> 00:01:18,810
and here we can create a secondary index.

21
00:01:18,810 --> 00:01:23,460
We can create both the local secondary index and the global secondary index.

22
00:01:23,840 --> 00:01:26,860
So we're going to create a local index.

23
00:01:27,340 --> 00:01:31,350
Now note that the local secondary index has the same partition

24
00:01:31,350 --> 00:01:34,180
key as the base table but a different sort key.

25
00:01:34,740 --> 00:01:38,000
So all we need to specify here is the sort key.

26
00:01:38,460 --> 00:01:43,260
And I'm going to use SKU as the sort key and that's going to be a string.

27
00:01:43,840 --> 00:01:48,218
And I'll leave the index name and attribute projections is going to be all so

28
00:01:48,243 --> 00:01:52,560
all actual attributes will be projected into the index.

29
00:01:53,040 --> 00:01:54,450
Let's create that index.

30
00:01:55,140 --> 00:01:59,250
That's specified now. So what we can do is go down and create our table.

31
00:01:59,740 --> 00:02:03,470
So the table is being created and we now need to populate some values.

32
00:02:04,040 --> 00:02:07,810
I'm going to run the same command that we used earlier on in the section

33
00:02:07,820 --> 00:02:13,160
to batch write items and use the mystore.json to populate the table.

34
00:02:13,640 --> 00:02:16,530
So on the command line, I'm going to simply run that command.

35
00:02:16,780 --> 00:02:20,150
And that should have now populated the items in our table.

36
00:02:20,540 --> 00:02:25,960
Back in DynamoDB, let's look at how we can scan and query using our index.

37
00:02:26,840 --> 00:02:32,130
So here I have scanned, selected, and my store so that's the main table.

38
00:02:32,310 --> 00:02:34,660
And we can see all the items down here.

39
00:02:35,340 --> 00:02:38,850
Now if I change that to index, I can then run.

40
00:02:39,340 --> 00:02:41,990
And the items have been added to this table

41
00:02:42,000 --> 00:02:45,300
and the attributes have been projected along with them.

42
00:02:45,350 --> 00:02:50,031
If we then go to query, it's gone back to my store.

43
00:02:50,055 --> 00:02:54,330
So with my store, we can query based on the client ID.

44
00:02:54,720 --> 00:02:58,130
So that would be the email address of the client in this case

45
00:02:58,740 --> 00:03:01,300
and the sort key which is the created date.

46
00:03:01,450 --> 00:03:07,590
We can then add filters but we can't search on any other attributes.

47
00:03:07,590 --> 00:03:12,150
It has to be the client ID and the created date.

48
00:03:12,740 --> 00:03:15,680
Now if we change to the index,

49
00:03:16,240 --> 00:03:19,980
now we see that changes so now we can use the client ID.

50
00:03:19,990 --> 00:03:25,150
So let's just copy one of these client IDs so PJ@example.com.

51
00:03:26,140 --> 00:03:29,920
And now we can use these sort keys, so we can actually then go and find

52
00:03:30,020 --> 00:03:34,150
an SKU ID here and put that in.

53
00:03:35,040 --> 00:03:40,818
And now we can run a more efficient query because we're now able to

54
00:03:40,842 --> 00:03:42,360
use a different sort key.

55
00:03:43,340 --> 00:03:46,680
So that's how a local secondary index works.

56
00:03:47,300 --> 00:03:50,040
Now, with the local secondary index were able to

57
00:03:50,065 --> 00:03:52,845
change the sort key so that gives us some benefits

58
00:03:52,950 --> 00:03:55,010
for some more efficient queries.

59
00:03:55,440 --> 00:03:59,060
But we might also want to change the partition key too.

60
00:03:59,540 --> 00:04:02,610
And that's where we need a global secondary index.

61
00:04:03,440 --> 00:04:06,010
So let's go up to update settings,

62
00:04:06,940 --> 00:04:07,960
indexes,

63
00:04:08,540 --> 00:04:10,460
and we're going to create an index.

64
00:04:11,040 --> 00:04:14,010
And this will create a global secondary index.

65
00:04:14,740 --> 00:04:19,160
So this time for partition key I'm going to enter SKU.

66
00:04:19,940 --> 00:04:21,420
And then for sort key

67
00:04:22,040 --> 00:04:25,140
I'm going to enter QTY so quantity.

68
00:04:25,510 --> 00:04:27,560
And that's going to be a number value.

69
00:04:28,140 --> 00:04:31,180
We're going to leave the index capacity as it is.

70
00:04:31,290 --> 00:04:33,650
You do need to have sufficient capacity here.

71
00:04:33,650 --> 00:04:36,550
You can get performance problems if your GSI

72
00:04:36,550 --> 00:04:39,360
does not have sufficient read and write capacity.

73
00:04:39,990 --> 00:04:42,730
So let's scroll down. We'll project all attributes

74
00:04:43,240 --> 00:04:45,021
and let's create that index.

75
00:04:45,045 --> 00:04:48,520
So that took a few minutes. My table is now ready.

76
00:04:48,530 --> 00:04:51,360
So what I'm going to do is go back to explore items,

77
00:04:51,756 --> 00:04:55,470
choose scan query, and we now have two indexes.

78
00:04:55,470 --> 00:05:00,910
So we have the index which is the local secondary index with SKU index

79
00:05:01,130 --> 00:05:03,370
and then we've got this one which is SKU

80
00:05:03,380 --> 00:05:06,760
quantity index, that's our global secondary index.

81
00:05:07,540 --> 00:05:11,860
So if I go to query and select my GSI,

82
00:05:12,340 --> 00:05:16,450
now you will see that we have the SKU and the quantity.

83
00:05:17,040 --> 00:05:22,310
So this gives us a whole lot of different options for how we can query efficiently.

84
00:05:22,320 --> 00:05:25,320
So for example, let's put in that partition key again

85
00:05:25,400 --> 00:05:30,260
and say that the number value is equal to one.

86
00:05:30,740 --> 00:05:32,240
And let's see what gets returned.

87
00:05:32,740 --> 00:05:38,958
And so here we have the responses where we have an SKU value of a specific value

88
00:05:38,982 --> 00:05:42,000
and the quantity of items purchase were one.

89
00:05:42,370 --> 00:05:45,300
So that's how we can use LSI and GSIs

90
00:05:45,300 --> 00:05:49,380
to scan and query the information in our tables efficiently.

91
00:05:49,940 --> 00:05:53,890
So that's it for this lesson. And we are going to delete this table.

92
00:05:53,890 --> 00:05:55,700
We don't need this one anymore.

93
00:05:55,710 --> 00:05:59,480
We do need to create another one a bit later on in this section.

94
00:05:59,660 --> 00:06:01,540
But because this has indexes,

95
00:06:01,540 --> 00:06:05,180
I'd rather get rid of this now as it can slow down some operations.

